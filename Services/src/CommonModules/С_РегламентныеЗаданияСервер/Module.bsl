Процедура  ЗаполнитьDirectBank() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РегистрацияСервисов.ПользовательСервиса КАК ПользовательСервиса,
	|	РегистрацияСервисов.Сервис КАК Сервис,
	|	РегистрацияСервисов.Партнер КАК Партнер,
	|	РегистрацияСервисов.Включен,
	|	РегистрацияСервисов.ДатаДействияС,
	|	РегистрацияСервисов.ДатаДействияПо,
	|	РегистрацияИТСОборотыОбороты.ДатаС КАК ДатаСИТС,
	|	РегистрацияИТСОборотыОбороты.ДатаПо КАК датаПоИТС,
	|	РегистрацияСервисов.IDDOCREQUEST,
	|	РегистрацияСервисов.IDSERVICE,
	|	РегистрацияСервисов.IDSERVICEVA
	|ИЗ
	|	РегистрСведений.РегистрацияСервисов КАК РегистрацияСервисов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.С_РегистрацияИТС.Обороты(, , , ) КАК РегистрацияИТСОборотыОбороты
	|		ПО РегистрацияСервисов.ПользовательСервиса.РегистрационныйНомерОсновнойПоставки = РегистрацияИТСОборотыОбороты.РегистрационныйНомер
	|			И РегистрацияСервисов.ПользовательСервиса.УНП = РегистрацияИТСОборотыОбороты.ИНН
	|ГДЕ
	|	РегистрацияСервисов.Сервис = &Сервис";
	
	Запрос.УстановитьПараметр("Сервис", Справочники.С_Сервисы.CurrRates);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Наборзаписей =  регистрыСведений.С_РегистрацияСервисов.СоздатьНаборЗаписей();
		Наборзаписей.Отбор.ПользовательСервиса.Установить(ВыборкаДетальныеЗаписи.ПользовательСервиса);
		Наборзаписей.Отбор.Партнер.Установить(ВыборкаДетальныеЗаписи.Партнер);
		Наборзаписей.Отбор.IDDOCREQUEST.Установить(ВыборкаДетальныеЗаписи.IDDOCREQUEST);
		Наборзаписей.Отбор.IDSERVICE.Установить(ВыборкаДетальныеЗаписи.IDSERVICE);
		Наборзаписей.Отбор.IDSERVICEVA.Установить(ВыборкаДетальныеЗаписи.IDSERVICEVA);
		Наборзаписей.Отбор.Партнер.Установить(ВыборкаДетальныеЗаписи.Партнер);
		Наборзаписей.Отбор.Сервис.Установить(Справочники.С_Сервисы.Einvoices);
		Наборзаписей.Прочитать();
		
		Если Наборзаписей.Количество()>	0 Тогда
			стрЭСЧФ =  Наборзаписей[0];
		Иначе	
			стрЭСЧФ = Наборзаписей.Добавить();
		КонецЕсли;	
		стрЭСЧФ.ДатаДействияС =  ?(ВыборкаДетальныеЗаписи.ДатаСИТС = NULL, Дата('20170101'), ВыборкаДетальныеЗаписи.ДатаСИТС);
		
		стрЭСЧФ.ДатаДействияПо = ВыборкаДетальныеЗаписи.ДатаДействияПо;
		стрЭСЧФ.Сервис = Справочники.С_Сервисы.DirectBank;
		стрЭСЧФ.партнер =  ВыборкаДетальныеЗаписи.Партнер;
		стрЭСЧФ.ПользовательСервиса =  ВыборкаДетальныеЗаписи.ПользовательСервиса;
		стрЭСЧФ.Включен = Истина;
		Наборзаписей.Записать();
	КонецЦикла;
	
КонецПроцедуры

/////Курсы валют

Процедура ЗагрузкаКурсовВалютРегламентноеЗадание()Экспорт
	
	ВыборкаВалюты = Справочники.С_Валюты.Выбрать();
	ТекДата = ТекущаяДата();
	ТекущаяДатаНачало = НачалоДня(ТекДата);
	БудущаяДатаКонец  = КонецДня(ТекДата);
	
	Пока ВыборкаВалюты.Следующий() Цикл	
		
		ВнутреннийКод = "";                                                
		Кратность = 1;
		С_КлассификаторВалютСервер.ЗаполнитьДанныеПоВалюте(ВыборкаВалюты.Код, ВнутреннийКод, Кратность, БудущаяДатаКонец);
		
		Прокси = WSСсылки.WSСсылкаНБРБ.СоздатьWSПрокси("http://www.nbrb.by/", "ExRates","ExRatesSoap");
		ТипПер = Прокси.ФабрикаXDTO.Пакеты.Получить("http://www.nbrb.by/").Получить("ExRatesDyn");
		Парам  = Прокси.ФабрикаXDTO.Создать(ТипПер);
		
		Парам.curId    = ВнутреннийКод;
		Парам.fromDate = ТекущаяДатаНачало; 	
		Парам.toDate   = БудущаяДатаКонец; 	
		Результат      = Прокси.ExRatesDyn(Парам);
		Ответ          = Результат.ExRatesDynResult;	
		
		Если Результат.ExRatesDynResult = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		СписокОбъект = Результат.ExRatesDynResult.diffgram.NewDataSet.Currency;
		
		Если  ТипЗнч(СписокОбъект)  = Тип("ОбъектXDTO") Тогда
			НаборЗаписей = РегистрыСведений.С_КурсыВалют.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Валюта.Установить(ВыборкаВалюты.Ссылка);
			НаборЗаписей.Отбор.Период.Установить(ТекущаяДатаНачало);
			НаборЗаписей.Прочитать();
			НаборЗаписей.Очистить();
			
			Запись = НаборЗаписей.Добавить();		
			Запись.Валюта    = ВыборкаВалюты.Ссылка;
			Запись.Период    = Дата(СтрЗаменить(Лев(СписокОбъект.Date,10), "-", ""));
			Запись.Курс      = СписокОбъект["Cur_OfficialRate"];
			Запись.Кратность = Кратность;
			Попытка
				НаборЗаписей.Записать(Истина);
			Исключение
				ОтправитьПисьмо("Не удалось загрузить курсы валют" + ОписаниеОшибки());
				Возврат;
			Конецпопытки;	
		Иначе
			Для каждого ТекЭлт ИЗ СписокОбъект Цикл
				НаборЗаписей = РегистрыСведений.С_КурсыВалют.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Валюта.Установить(ВыборкаВалюты.Ссылка);
				НаборЗаписей.Отбор.Период.Установить(Дата(СтрЗаменить(Лев(текЭлт.Date,10), "-", "")));
				НаборЗаписей.Прочитать();
				НаборЗаписей.Очистить();
				
				Запись = НаборЗаписей.Добавить();		
				Запись.Валюта    = ВыборкаВалюты.Ссылка;
				Запись.Период    = Дата(СтрЗаменить(Лев(текЭлт.Date,10), "-", ""));
				Запись.Курс      = ТекЭлт["Cur_OfficialRate"];
				Запись.Кратность = Кратность;
				Попытка
					НаборЗаписей.Записать(Истина);
				Исключение
					ОтправитьПисьмо("Не удалось загрузить курсы валют " + ОписаниеОшибки());
					Возврат
				КонецПопытки;	
			КонецЦикла;	
		КонецЕсли;		
	КонецЦИкла;
	
	Если  НачалоДня(ТекДата) = НачалоМесяца(ТекДата) Тогда
		ТекущаяДатаНачало = ТекДата;
		ИмяВыходногоФайла = ПолучитьИмяВременногоФайла("xml");
		Соединение = Новый HTTPСоединение("nbrb.by/API/ExRates/");
		Соединение.Получить("Rates?onDate=" + Формат(ТекущаяДатаНачало,"ДФ=yyyy-MM-dd") + "&Periodicity=1", имяВыходногоФайла);
		Содержание = "";        
		ЧтениеXML = Новый ЧтениеТекста(имяВыходногоФайла, КодировкаТекста.UTF8);
		Стр = ЧтениеXML.Прочитать();
		Стр = СтрЗаменить(Стр, "},", Символы.ПС+"*" + Символы.ПС);
		Стр = СтрЗаменить(Стр, ",", Символы.ПС);
		КоличествоСтрок = СтрЧислоСтрок(Стр);
		сч = 1;
		КодВалюты = "";
		Кратность = "";
		Пока сч <>  КоличествоСтрок цикл
			Стро = СтрПолучитьСтроку(Стр, сч);
			Если Найти(стро,"Cur_ID")<> 0 Тогда
				Стро = СтрЗаменить(Стро, "[{""Cur_ID"":", "");
				Стро = СтрЗаменить(Стро, "{""Cur_ID"":", "");
				КодВалюты = Стро;
			ИначеЕсли  Найти(стро,"Cur_Scale")<> 0 Тогда
				Стро = СтрЗаменить(Стро, """Cur_Scale"":", "");
				Кратность = Число(Стро);
			ИначеЕсли  Найти(стро,"Date")<> 0 Тогда
				Стро = СтрЗаменить(Стро, """Date"":""", "");
				ДатаКурса = Лев(Стро,4) + Сред(стро,6,2) + Сред(стро,9,2);
				ДатаКурса = дата(ДатаКурса);
			ИначеЕсли  Найти(стро,"Cur_OfficialRate")<> 0 Тогда
				Стро = СтрЗаменить(Стро, """Cur_OfficialRate"":", "");
				Курс = Число(Стро);
			ИначеЕсли  Найти(стро,"*")<> 0 Тогда
				ВнутреннийКод = "";
				Кратность = 1;
				С_КлассификаторВалютСервер.ЗаполнитьДанныеПоВалюте(КодВалюты, ВнутреннийКод, Кратность, ТекущаяДатаНачало);
				Валюта = Справочники.С_Валюты.НайтиПоКоду(ВнутреннийКод);
				
				НаборЗаписей = РегистрыСведений.С_КурсыВалют.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Валюта.Установить(Валюта);
				НаборЗаписей.Отбор.Период.Установить(ТекущаяДатаНачало);
				НаборЗаписей.Прочитать();
				НаборЗаписей.Очистить();
				
				Запись = НаборЗаписей.Добавить();		
				Запись.Валюта    = Валюта;
				Запись.Период    = ТекущаяДатаНачало;
				Запись.Курс      = Курс;
				Запись.Кратность = Кратность;
				Попытка
					НаборЗаписей.Записать(Истина);
				Исключение
					ОтправитьПисьмо("Не удалось загрузить курсы валют " + ОписаниеОшибки());
					Возврат;
				КонецПопытки;
			КонецЕсли;	
			сч = сч + 1;
		КонецЦикла;	
	КонецЕсли;	
	
КонецПроцедуры	

//МНС
Процедура ЗагрузкаФайлаИзМНС() Экспорт
	
	ДатаФайлаН = Константы.С_ДатаЗагрузкиФайлаМНС.Получить();
	СтараяДата = ДатаФайлаН;
	ДатаФайлаК = ТекущаяДата();
	ВременныйФайл = ПолучитьИмяВременногоФайла("xls");
	Файл = Неопределено;
	Пока ДатаФайлаН < ДатаФайлаК цикл
		Попытка                
			ФайлНаВебСервере = "http://nalog.gov.by/uploads/documents/LIKV_BDOLG" + Лев(ДатаФайлаН,10) + ".xls";
			ПараметрыПолучения	 = Новый Структура("ПутьДляСохранения", ВременныйФайл);
			РезультатИзИнтернета = ПолучениеФайловИзИнтернета.СкачатьФайлНаСервере(ФайлНаВебСервере, ПараметрыПолучения);
			Если НЕ РезультатИзИнтернета.Свойство("СообщениеОбОшибке") И Не СтараяДата = ДатаФайлаН Тогда
				Файл = ВременныйФайл; 
				Константы.С_ДатаЗагрузкиФайлаМНС.Установить(ДатаФайлаН);
			КонецЕсли;
		Исключение	
		КонецПопытки;	
		ДатаФайлаН = ДатаФайлаН + 60 * 60 * 24;	
	КонецЦикла;
	
	Если Файл = Неопределено  Тогда 
		Возврат;
	КонецЕсли;
	
	УчетнаяЗапись = Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты;
	ПараметрыПисьма = Новый Структура;
	
	МассивКому   = Новый Массив;
	СтруктураКому = Новый Структура;
	СтруктураКому.Вставить("Адрес","inna.scorpio@gmail.com");  
	СтруктураКому.Вставить("Представление","inna.scorpio@gmail.com");
	МассивКому.Добавить(СтруктураКому);
	
	//СтруктураКому = Новый Структура;
	//СтруктураКому.Вставить("Адрес","savo@1c-minsk.by");  
	//СтруктураКому.Вставить("Представление","savo@1c-minsk.by");
	//МассивКому.Добавить(СтруктураКому);
	ПараметрыПисьма.Вставить("Кому", МассивКому); 
	
	Попытка
		ОтправитьПисьмо("Пришел файл МНС от " + Строка(Константы.С_ДатаЗагрузкиФайлаМНС.Получить()), Файл);
	Исключение    
		ОтправитьПисьмо("Не удалось загрузить файл с сайта МНС " + ОписаниеОшибки())
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗагрузкаКлассификатораБанков() Экспорт 
	
	УчетнаяЗапись = Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты;
	МассивСообщений = РаботаСПочтовымиСообщениями.ЗагрузитьПочтовыеСообщения(УчетнаяЗапись);
	
	Если МассивСообщений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИмяФайлаСообщения = "";
	ЕстьКлассификатор = Ложь;
	
	Для Индекс = 0 По МассивСообщений.Количество() - 1 Цикл  		
		Если Не МассивСообщений[Индекс].Тема = "Классификатор банков" Тогда
			Продолжить;
		КонецЕсли;	
		ИмяВременногФайла = ПолучитьИмяВременногоФайла("xls");
		
		Попытка
			МассивСообщений[Индекс].Вложения[0].Данные.Записать(ИмяВременногФайла);
			ЕстьКлассификатор = истина;
		Исключение
		КонецПопытки;
		
	КонецЦикла;
	
	Если НЕ ЕстьКлассификатор Тогда
		Возврат;
	КонецЕсли;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	Попытка
		ТабличныйДокумент.Прочитать(ИмяВременногФайла, СпособЧтенияЗначенийТабличногоДокумента.Значение);    
	Исключение
		ОтправитьПисьмо("Не удалось загрузить обновить классификатор  банков " + ОписаниеОшибки());
		Возврат
	КонецПопытки;
	
	КолвоСтрокФайла = ТабличныйДокумент.ВысотаТаблицы-1;
	КонечнаяКолонка = ТабличныйДокумент.ПолучитьОбласть().ШиринаТаблицы;
	
	Если КолвоСтрокФайла = 0 Тогда
		ТабличныйДокумент = Неопределено;
	КонецЕсли;
	
	Макет = Справочники.С_КлассификаторБанков.ПолучитьМакет("Макет");
	ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	
	Запись = Новый ЗаписьXML;
	Запись.УстановитьСтроку("UTF-8");
	Запись.ЗаписатьНачалоЭлемента("Items");
	Запись.ЗаписатьАтрибут("Description", "Банки");
	Запись.ЗаписатьАтрибут("Columns", "БИК,НаименованиеПолное,Адрес,КодГорода,Телефоны");
	
	КоличествоВФайле = 0;
	
	Для ит = 9 ПО КолвоСтрокФайла Цикл
		нстр = СтрЗаменить(ит, Символы.НПП, "");
		Если Найти(ТабличныйДокумент.ПолучитьОбласть("R"+ нстр + "C2").ТекущаяОбласть.Текст, "область") <> 0 Тогда
			Продолжить
		КонецЕсли;
		
		Если ТабличныйДокумент.ПолучитьОбласть("R"+ нстр + "C8").ТекущаяОбласть.Текст = "" И
			ТабличныйДокумент.ПолучитьОбласть("R"+ нстр + "C6").ТекущаяОбласть.Текст = "" и ит>700 Тогда
			Прервать;
		КонецЕсли;	
		
		Запись.ЗаписатьНачалоЭлемента("Item");	
		Запись.ЗаписатьАтрибут("БИК", ТабличныйДокумент.ПолучитьОбласть("R"+ нстр + "C3").ТекущаяОбласть.Текст);
		Запись.ЗаписатьАтрибут("НаименованиеПолное", ТабличныйДокумент.ПолучитьОбласть("R"+ нстр + "C8").ТекущаяОбласть.Текст);
		Запись.ЗаписатьАтрибут("Адрес",  	ТабличныйДокумент.ПолучитьОбласть("R"+ нстр + "C9").ТекущаяОбласть.Текст);
		Запись.ЗаписатьАтрибут("КодГорода", ТабличныйДокумент.ПолучитьОбласть("R"+ нстр + "C10").ТекущаяОбласть.Текст);
		Запись.ЗаписатьАтрибут("Телефоны", ТабличныйДокумент.ПолучитьОбласть("R"+ нстр + "C11").ТекущаяОбласть.Текст);			
		Запись.ЗаписатьКонецЭлемента();
		КоличествоВФайле = КоличествоВФайле + 1;
	КонецЦикла;
	
	Запись.ЗаписатьКонецЭлемента();
	/////////////////////
	Справочник = Справочники.С_КлассификаторБанков.КлассификаторБанков.ПолучитьОбъект();
	Справочник.Текст = Запись.Закрыть();
	Справочник.ДатаКлассификатораБанков = ТекущаяДата();
	Справочник.Записать();
	
	// Проверка загрузки в классификатор Начало		
	КлассификаторГородовXML = Справочники.С_КлассификаторБанков.ПолучитьМакет("КодыГородовБанков").ПолучитьТекст();
	
	КлассификаторТаблица = ОбщегоНазначения.ПрочитатьXMLВТаблицу(Справочник.текст).Данные;
	КлассификаторГородовТаблица = ОбщегоНазначения.ПрочитатьXMLВТаблицу(КлассификаторГородовXML).Данные;
	
	СписокГородов = Новый ТаблицаЗначений;
	СписокГородов.Колонки.Добавить("Код", Новый ОписаниеТипов("Строка"));
	СписокГородов.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка"));
	
	СписокБанков = Новый ТаблицаЗначений;
	СписокБанков.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка"));
	СписокБанков.Колонки.Добавить("БИК", Новый ОписаниеТипов("Строка"));
	СписокБанков.Колонки.Добавить("КоррСчет", Новый ОписаниеТипов("Строка"));
	СписокБанков.Колонки.Добавить("Город", Новый ОписаниеТипов("Строка"));
	СписокБанков.Колонки.Добавить("Регион", Новый ОписаниеТипов("Строка"));
	СписокБанков.Колонки.Добавить("КодРегиона", Новый ОписаниеТипов("Строка"));
	СписокБанков.Колонки.Добавить("Выбран", Новый ОписаниеТипов("Строка"));
	СписокБанков.Колонки.Добавить("Адрес", Новый ОписаниеТипов("Строка"));
	СписокБанков.Колонки.Добавить("Телефоны", Новый ОписаниеТипов("Строка"));
	СписокБанков.Колонки.Добавить("КодБанка", Новый ОписаниеТипов("Строка"));
	СписокБанков.Колонки.Добавить("КодГорода", Новый ОписаниеТипов("Строка"));
	
	Для Каждого ЗаписьКГ Из КлассификаторГородовТаблица Цикл
		НоваяСтрока = СписокГородов.Добавить();
		НоваяСтрока.Наименование	   = ЗаписьКГ.Наименование;
		НоваяСтрока.Код				   = ЗаписьКГ.Код;
	КонецЦикла;	
	
	КоличествоЭлементов = 0;
	Для Каждого ЗаписьОКВ Из КлассификаторТаблица Цикл
		НоваяСтрока = СписокБанков.Добавить();
		НоваяСтрока.Наименование	   = ЗаписьОКВ.НаименованиеПолное;
		НоваяСтрока.БИК				   = ЗаписьОКВ.БИК;
		НоваяСтрока.Адрес		       = ЗаписьОКВ.Адрес;
		НоваяСтрока.Телефоны		   = ЗаписьОКВ.Телефоны;
		КодГорода                      = ЗаписьОКВ.КодГорода;
		Если ЗначениеЗаполнено(КодГорода) Тогда
			СтрГород = КлассификаторГородовТаблица.Найти(КодГорода, "Код");
			Если  СтрГород <> Неопределено Тогда
				НоваяСтрока.Город		       = "г. " + СтрГород.Наименование;
			КонецЕсли;
		КонецЕсли;
		НоваяСтрока.КодБанка		   = Прав(ЗаписьОКВ.БИК,3);
		НоваяСтрока.Выбран	           = Ложь;
	КонецЦикла;
	
	Обработано = 0;
	Выборка = Справочники.С_КлассификаторБанков.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.Предопределенный Тогда
			Продолжить;
		КонецЕсли;
		ОбъектСпр = Выборка.ПолучитьОбъект();
		ОбъектСпр.Удалить();
	КонецЦикла;
	
	
	Для Каждого СтрокаТаблицы Из СписокБанков Цикл
		Обработано = Обработано + 1;
		БанкОбъект = Справочники.С_КлассификаторБанков.СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств(БанкОбъект, СтрокаТаблицы);
		БанкОбъект.Код = СтрокаТаблицы.БИК;
		Попытка
			БанкОбъект.Записать();			
		Исключение
			ОтправитьПисьмо("Не удалось обновить классификатор банков " + ОписаниеОшибки());
			Возврат
		КонецПопытки;	
	КонецЦикла; 
	
	// Проверка загрузки в классификатор Конец
	Попытка
		УдалитьФайлы(ИмяВременногФайла);	
	Исключение
	КонецПопытки;
	
	Константы.С_ДатаОбновленияКлассификаторБанков.Установить(ТекущаяДата());			
	
КонецПроцедуры

Процедура ЗагрузитьФайлРеестраПравонарушений() Экспорт
	
	ВерсияРеестраБаза = Константы.С_ДатаОбновленияРеестраПравонарушений.Получить();
	
	Попытка
		ФайлНаВебСервере  = "http://www.nalog.gov.by/uploads/documents/Report.xls";
		ВременныйФайл	 = ПолучитьИмяВременногоФайла("xls");
		ПараметрыПолучения	 = Новый Структура("ПутьДляСохранения");
		ПараметрыПолучения. Вставить("ПутьДляСохранения", ВременныйФайл);
		РезультатИзИнтернета = ПолучениеФайловИзИнтернета.СкачатьФайлНаСервере(ФайлНаВебСервере,ПараметрыПолучения);
		Если РезультатИзИнтернета.Свойство("СообщениеОбОшибке") Тогда
			ЗаписьЖурналаРегистрации("Загрузка реестра правонарушений.", УровеньЖурналаРегистрации.Информация, , , НСтр("ru = 'Ошибка записи файла'"));
			Возврат
		КонецЕсли;
	Исключение	
	КонецПопытки;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Попытка
		ТабличныйДокумент.Прочитать(ВременныйФайл, СпособЧтенияЗначенийТабличногоДокумента.Значение);    
	Исключение
		ОтправитьПисьмо("Не удалось загрузить реестр правонарушений " + ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	КолвоСтрокФайла = ТабличныйДокумент.ВысотаТаблицы-1;
	КонечнаяКолонка = ТабличныйДокумент.ПолучитьОбласть().ШиринаТаблицы;
	
	Если КолвоСтрокФайла = 0 Тогда
		ТабличныйДокумент = Неопределено;
	КонецЕсли;
	
	Попытка
		ДатаРеестраСтр = Прав(СтрПолучитьСтроку(ТабличныйДокумент.ПолучитьОбласть("R1C1").ТекущаяОбласть.Текст,2),10);
		ДатаРеестра = Дата(Прав(ДатаРеестраСтр,4) + сред(ДатаРеестраСтр,4,2) + Лев(ДатаРеестраСтр,2));
		Если НачалоДня(ВерсияРеестраБаза) <> НачалоДня(ДатаРеестра) Тогда
			НаборЗаписей = РегистрыСведений.С_РеестрПравонарушений.СоздатьНаборЗаписей();
			НаборЗаписей.Записать();
			Для ит = 3 ПО КолвоСтрокФайла Цикл
				нстр = СтрЗаменить(ит, Символы.НПП, "");
				Значение  = ТабличныйДокумент.ПолучитьОбласть("R"+ нстр + "C1").ТекущаяОбласть.Текст;
				Запись = НаборЗаписей.Добавить();
				Запись.УНП = Значение;
				Запись.Период = ДатаРеестра;
			КонецЦикла;
			НаборЗаписей.Записать();
			Константы.С_ДатаОбновленияРеестраПравонарушений.Установить(ДатаРеестра);
		КонецЕсли;
	Исключение	
		ЗаписьЖурналаРегистрации("Загрузка реестра правонарушений.", УровеньЖурналаРегистрации.Информация, , , ОписаниеОшибки());
		Возврат		
	КонецПопытки;
	
КонецПроцедуры		// ЗагрузитьПоступление()


Процедура ОбновлениеРегистраЕГР() Экспорт
	
	УчетнаяЗапись = Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты;
	МассивСообщений = РаботаСПочтовымиСообщениями.ЗагрузитьПочтовыеСообщения(УчетнаяЗапись);
	
	МассивЗаголовков = Новый Массив;
	МассивЗаголовков.Добавить("ЕГР");
	
	Если МассивСообщений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Индекс = 0 По МассивСообщений.Количество() - 1 Цикл  		
		Если Не МассивСообщений[Индекс].Тема = "ЕГР" Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка
			ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xlsx");
			МассивСообщений[Индекс].Вложения[0].Данные.Записать(ИмяВременногоФайла);
		Исключение
			ОтправитьПисьмо("Не удалось обновить ЕГР " + ОписаниеОшибки());
			Возврат;
		КонецПопытки;
	КонецЦикла;
	
	Отказ = Ложь;
	
	ПрочитатьФайлЕГР(ИмяВременногоФайла, Отказ);
	Если Отказ Тогда
		//ОтправитьПисьмо("Не удалось обновить ЕГР " + ОписаниеОшибки());
		Возврат
	КонецЕсли;
	
	ОтправитьПисьмо("Обновлен ЕГР от " + Строка(ТекущаяДата()));
	
	
КонецПроцедуры

Процедура ПрочитатьФайлЕГР(ВременныйФайл, Отказ)
	
	ВерсияРеестраБаза = Константы.С_ДатаОбновленияРеестраПравонарушений.Получить();
	ДатаДанных = ТекущаяДатаСеанса();
	ТабличныйДокумент = Новый ТабличныйДокумент;
	Попытка
		ТабличныйДокумент.Прочитать(ВременныйФайл,СпособЧтенияЗначенийТабличногоДокумента.Значение);    
	Исключение
		Отказ = Истина;	
		Возврат;
	КонецПопытки;
	
	КолвоСтрокФайла = ТабличныйДокумент.ВысотаТаблицы-1;
	КонечнаяКолонка = ТабличныйДокумент.ПолучитьОбласть().ШиринаТаблицы;
	
	Если КолвоСтрокФайла = 0 Тогда
		ТабличныйДокумент = Неопределено;
	КонецЕсли;
	
	Попытка
		ДатаРеестра = ТекущаяДата();		
		НаборЗаписей = РегистрыСведений.С_ЕГР.СоздатьНаборЗаписей();
		НаборЗаписей.Прочитать();
		НаборЗаписей.Очистить();
		Для ит = 3 ПО КолвоСтрокФайла Цикл
			нстр = СтрЗаменить(ит, Символы.НПП, "");
			Запись = НаборЗаписей.Добавить();
			Запись.Период = ДатаДанных;
			Запись.УНП = стрЗаменить(ТабличныйДокумент.ПолучитьОбласть("R"+ нстр + "C3").ТекущаяОбласть.Текст,символы.нпп, "");
			Запись.Наименование = ТабличныйДокумент.ПолучитьОбласть("R"+ нстр + "C2").ТекущаяОбласть.Текст;
			Запись.КодМНС = ТабличныйДокумент.ПолучитьОбласть("R"+ нстр + "C4").ТекущаяОбласть.Текст;
			Запись.ДатаИсключения = ТабличныйДокумент.ПолучитьОбласть("R"+ нстр + "C5").ТекущаяОбласть.Текст
		КонецЦикла;
		НаборЗаписей.Записать();
	Исключение	
		Отказ = Истина;	
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

Процедура  ОтправитьПисьмо(Тема, ФайлВложение = Неопределено)
	
	УчетнаяЗапись = Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты;
	ПараметрыПисьма = Новый Структура;
	
	МассивКому   = Новый Массив;
	СтруктураКому = Новый Структура;
	СтруктураКому.Вставить("Адрес","inna.scorpio@gmail.com");  
	СтруктураКому.Вставить("Представление","inna.scorpio@gmail.com");
	МассивКому.Добавить(СтруктураКому);
	
	//СтруктураКому = Новый Структура;
	//СтруктураКому.Вставить("Адрес","savo@1c-minsk.by");  
	//СтруктураКому.Вставить("Представление","savo@1c-minsk.by");
	//МассивКому.Добавить(СтруктураКому);
	//ПараметрыПисьма.Вставить("Кому", МассивКому); 
	
	Если ФайлВложение = Неопределено Тогда
		Вложения = Новый Структура;
		Вложения.Вставить("Файл", ФайлВложение);
		ПараметрыПисьма.Вставить("Вложения", Вложения);
	КонецЕсли;
	
	ПараметрыПисьма.Вставить("Тема", Тема); 
	ИдентификаторСообщения = РаботаСПочтовымиСообщениями.ОтправитьПочтовоеСообщение(УчетнаяЗапись, ПараметрыПисьма);
	
КонецПроцедуры	