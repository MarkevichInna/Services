
Процедура ПроверитьОбщийДоступКСервисам(СтруктураПараметров, Ответ, КодОшибки, Отказ) Экспорт
			
	С_ИТССервер.ПроверитьПодпискуИТС(СтруктураПараметров, КодОшибки, Отказ);	
																							
	Если Отказ Тогда
		С_СлужебныеПроцедурыФункцииСервер.ДобавитьКодОшибкиВОтвет(Ответ, КодОшибки);
		Возврат; 
	КонецЕсли;
										
	ПользовательСервиса = С_ПользователиСервисов.ПолучитьПользователяСервисов(СтруктураПараметров, КодОшибки, Отказ);
										
	Если Отказ Тогда
		С_СлужебныеПроцедурыФункцииСервер.ДобавитьКодОшибкиВОтвет(Ответ, КодОшибки);
		Возврат; 
	КонецЕсли;
	
	СтруктураПараметров.Вставить("ПользовательСервиса", ПользовательСервиса);
	
КонецПроцедуры

Процедура ЗарегистрироватьИспользованиеСервиса(СтруктураПараметров, Сервис, КодОшибки, Отказ) Экспорт
		
	С_РаботаССервисамиСлужебный.ПроверитьИспользованиеСервиса(СтруктураПараметров.ПользовательСервиса, Сервис, КодОшибки, Отказ);													
	Если Отказ Тогда
		Возврат; 
	КонецЕсли;												
	С_ПользователиСервисов.ЗарегистрироватьДействиеПользователя(СтруктураПараметров, Сервис);
													
КонецПроцедуры	

Процедура УстановитьБесплатныеСервисыДляНовогоПользователя(Пользователь) Экспорт
	
	СтруктураПериодаИТС = С_ИТССервер.ПолучитьПериодДействияИТС(Пользователь.РегистрационныйНомерОсновнойПоставки,
							Пользователь.УНП);
			
	Наборзаписей = РегистрыСведений.РегистрацияСервисовРС.СоздатьНаборЗаписей();
	Наборзаписей.Отбор.ПользовательСервиса.Установить(Пользователь);
	Наборзаписей.Прочитать();
	
	БесплатныеСервисы = ПолучитьБесплатныеСервисы();
	Для каждого сервис Из БесплатныеСервисы Цикл		
		стрСервис = НаборЗаписей.Добавить();
		стрСервис.ДатаДействияС =  СтруктураПериодаИТС.ДатаС;
		стрСервис.ДатаДействияПо = СтруктураПериодаИТС.ДатаПо;
		стрСервис.Сервис = сервис;
		стрСервис.ПользовательСервиса =  Пользователь;
		стрСервис.Включен = Истина;
	КонецЦикла;
		
	Попытка
		Наборзаписей.Записать();
	Исключение		
	КонецПопытки
		
КонецПроцедуры	

Функция ПроверитьИспользованиеСервиса(ПользовательСервиса, Сервис,  КодОшибки, Отказ, ЭтоКодМетода = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РегистрацияСервисовРС.Включен,
		|	РегистрацияСервисовРС.ДатаДействияС,
		|	РегистрацияСервисовРС.ДатаДействияПо
		|ИЗ
		|	РегистрСведений.С_РегистрацияСервисов КАК РегистрацияСервисовРС
		|ГДЕ
		|	РегистрацияСервисовРС.ПользовательСервиса = &ПользовательСервиса
		|	И РегистрацияСервисовРС.Сервис = &Сервис";
	
	Запрос.УстановитьПараметр("ПользовательСервиса", ПользовательСервиса);
	Запрос.УстановитьПараметр("Сервис", Сервис);
	
	РезультатЗапроса = Запрос.Выполнить();
	ИмяСервиса =  Сервис.ИмяПредопределенныхДанных;
	Если РезультатЗапроса.Пустой() Тогда
		Если ЭтоКодМетода тогда
			Возврат  "NOTUSED" + ИмяСервиса; 
		Иначе
			Возврат "NOT_USED";
		КонецЕсли;	
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Если НЕ Выборка.Включен Тогда
			Если ЭтоКодМетода Тогда 
				Возврат  "TURNEDOFF" + ИмяСервиса; 
			Иначе	
				Возврат "TURNED_OFF";	
			КонецЕсли;	
		КонецЕсли;	
	    ДатаДействия =  ТекущаяДатаСеанса();
		
		Если НачалоДня(Выборка.ДатаДействияС) > НачалоДня(ДатаДействия) Тогда
			
			Если ЭтоКодМетода Тогда
				Возврат "NOTVALIDITYFOR" + ИмяСервиса + "+" + Строка(Выборка.ДатаДействияС);
			Иначе
				Возврат "NOT_VALIDITYFOR" + "+" + Строка(Выборка.ДатаДействияС);
			КонецЕсли;
			
		КонецЕсли;
		
		Если  НачалоДня(Выборка.ДатаДействияПо) <  НачалоДня(ДатаДействия) Тогда
			Если ЭтоКодМетода Тогда
				Возврат  "NOTVALIDITYAFTER" + ИмяСервиса + "+" + Строка(Выборка.ДатаДействияПо);
			Иначе
				Возврат "NOT_VALIDITYAFTER" + "+" + Строка(Выборка.ДатаДействияПо);
			КонецЕсли;	
		КонецЕсли;	
		
	КонецЕсли;	
	
	Возврат "IT_WORKS";
		
КонецФункции	

Функция ПолучитьБесплатныеСервисы()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Сервисы.Ссылка
		|ИЗ
		|	Справочник.Сервисы КАК Сервисы
		|ГДЕ
		|	Сервисы.БесплатныйСервис";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить.ВыгрузитьКолонку("Ссылка");

КонецФункции

Функция НайтиСервис(СтруктураПараметров) Экспорт
	
	INN          = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтруктураПараметров.INN, ";");
	REGNUMBERS   = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтруктураПараметров.REGNUMBERS, ";");
	NAMECUSTOMER = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтруктураПараметров.NAMECUSTOMER, ";");
	IDSERVICE    = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтруктураПараметров.IDSERVICE, ";");	
	IDSERVICEVA  = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтруктураПараметров.IDSERVICEVA, ";");	
	
	// //////////
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("IDCUSTOMER",   СтруктураПараметров.IDCUSTOMER);
	СтруктураПоиска.Вставить("IDDOCREQUEST", СтруктураПараметров.IDDOCREQUEST);
	СтруктураПоиска.Вставить("IDSERVICEVA",  СтруктураПараметров.IDSERVICEVA);	
	СтруктураПоиска.Вставить("DATEBEGIN",    Дата(СтруктураПараметров.DATEBEGIN));
	СтруктураПоиска.Вставить("DATEEND",      Дата(СтруктураПараметров.DATEEND));	
	СтруктураПоиска.Вставить("IDCUSTOMER",   СтруктураПараметров.IDCUSTOMER);	
	
	СтруктураПоиска.Вставить("IDSERVICE",    IDSERVICE);		
	СтруктураПоиска.Вставить("REGNUMBER",    REGNUMBERS);
	СтруктураПоиска.Вставить("NAMECUSTOMER", NAMECUSTOMER);	
	СтруктураПоиска.Вставить("INN",          INN);
	СтруктураПоиска.Вставить("PARTNERCODE",  СтруктураПараметров.PARTNERCODE);
	СтруктураПоиска.Вставить("IDSERVICEVA",  IDSERVICEVA);
	
	СтруктураПараметров.Вставить("INN",INN);	
	СтруктураПараметров.Вставить("IDSERVICE",IDSERVICE);
	
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СервисИТС.STATUS КАК status,
	|	СервисИТС.IDSERVICE КАК idservice,
	|	СервисИТС.ДатаДействияС КАК datebegin,
	|	СервисИТС.ДатаДействияПо КАК dateend,
	|	СервисИТС.IDCUSTOMER КАК idcustomer,
	|	СервисИТС.IDDOCREQUEST КАК iddocrequest,
	|	СервисИТС.IDREQUEST КАК idrequest,
	|	СервисИТС.IDSERVICEVA КАК IDSERVICEVA,
	|	СервисИТС.NAMECUSTOMER КАК namecustomer,
	|	СервисИТС.Партнер.PARTNERCODE КАК partnercode,
	|	СервисИТС.ПользовательСервиса.УНП КАК inn,
	|	СервисИТС.ПользовательСервиса.РегистрационныйНомерОсновнойПоставки КАК regnumbers,
	|	СервисИТС.ПользовательСервиса,
	|	СервисИТС.Сервис,
	|	СервисИТС.Партнер,
	|	СервисИТС.Сервис.ИмяПредопределенныхДанных
	|ИЗ
	|	РегистрСведений.РегистрацияСервисовРС КАК СервисИТС
	|ГДЕ
	|	СервисИТС.Extra = ЛОЖЬ
	|	И СервисИТС.IDDOCREQUEST = &IDDOCREQUEST
	//|	И СервисИТС.IDSERVICEVA = &IDSERVICEVA
	|	И СервисИТС.IDSERVICE В(&IDSERVICE)
	|	И СервисИТС.Партнер.PARTNERCODE = &PARTNERCODE
	|	И СервисИТС.NAMECUSTOMER В(&NAMECUSTOMER)
	|	И СервисИТС.ДатаДействияС >= &DATEBEGIN
	|	И СервисИТС.ДатаДействияПо <= &DATEEND
	|	И СервисИТС.ПользовательСервиса.РегистрационныйНомерОсновнойПоставки В(&REGNUMBER)
	|	И СервисИТС.ПользовательСервиса.УНП В(&INN)
	|	И СервисИТС.IDCUSTOMER = &IDCUSTOMER
	|	И СервисИТС.Сервис.ИмяПредопределенныхДанных В(&IDSERVICEVA)";
	
	Если СтруктураПоиска.REGNUMBER.Количество() = 0 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И СервисИТС.ПользовательСервиса.РегистрационныйНомерОсновнойПоставки В(&REGNUMBER)", "");
	Иначе
		Запрос.УстановитьПараметр("REGNUMBER", СтруктураПоиска.REGNUMBER);
	КонецЕсли;	
	
	Если СтруктураПоиска.REGNUMBER.Количество() = 0 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И СервисИТС.ПользовательСервиса.РегистрационныйНомерОсновнойПоставки В(&REGNUMBER)", "");
	Иначе
		Запрос.УстановитьПараметр("REGNUMBER", СтруктураПоиска.REGNUMBER);
	КонецЕсли;	
	
	Если  СтруктураПоиска.INN.Количество() = 0 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И СервисИТС.ПользовательСервиса.УНП В(&INN)", "");
	Иначе
		Запрос.УстановитьПараметр("INN", СтруктураПоиска.INN);
	КонецЕсли;
	
	Если СтруктураПоиска.IDSERVICE.Количество() = 0 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И СервисИТС.IDSERVICE В(&IDSERVICE)", "");
	Иначе
		Запрос.УстановитьПараметр("IDSERVICE", СтруктураПоиска.IDSERVICE);
	КонецЕсли;
	
	Если СтруктураПоиска.IDSERVICEVA.Количество() = 0 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И СервисИТС.Сервис.ИмяПредопределенныхДанных В(&IDSERVICEVA)", "");
	Иначе
		Запрос.УстановитьПараметр("IDSERVICEVA", СтруктураПоиска.IDSERVICEVA);
	КонецЕсли;
	
	
	Если СтруктураПоиска.NAMECUSTOMER.Количество() = 0 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И СервисИТС.NAMECUSTOMER В(&NAMECUSTOMER)", "");
	Иначе
		Запрос.УстановитьПараметр("NAMECUSTOMER", СтруктураПоиска.NAMECUSTOMER);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтруктураПоиска.IDDOCREQUEST) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И СервисИТС.IDDOCREQUEST = &IDDOCREQUEST", "");
	Иначе
		Запрос.УстановитьПараметр("IDDOCREQUEST", СтруктураПоиска.IDDOCREQUEST);
	КонецЕсли;	
		
	Если Не ЗначениеЗаполнено(СтруктураПоиска.PARTNERCODE) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И СервисИТС.Партнер.PARTNERCODE = &PARTNERCODE", "");
	Иначе
		Запрос.УстановитьПараметр("PARTNERCODE", СтруктураПоиска.PARTNERCODE);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтруктураПоиска.DATEBEGIN) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И СервисИТС.ДатаДействияС >= &DATEBEGIN", "");
	Иначе
		Запрос.УстановитьПараметр("DATEBEGIN", СтруктураПоиска.DATEBEGIN);
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(СтруктураПоиска.DATEEND) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И СервисИТС.ДатаДействияПо <= &DATEEND", "");
	Иначе
		Запрос.УстановитьПараметр("DATEEND", СтруктураПоиска.DATEEND);
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(СтруктураПоиска.IDCUSTOMER) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И СервисИТС.IDCUSTOMER = &IDCUSTOMER", "");
	Иначе
		Запрос.УстановитьПараметр("IDCUSTOMER", СтруктураПоиска.IDCUSTOMER);
	КонецЕсли;
	
	Попытка
		РезультатЗапроса = Запрос.Выполнить();
		Возврат РезультатЗапроса;
	Исключение
		Возврат Неопределено                               
    КонецПопытки;		
	
КонецФункции	

Процедура ДобавитьСервис(ПользовательСервиса, Сервис, СтруктураПодключения, Отказ)Экспорт
	
	Партнер = Справочники.Партнеры.НайтиПоНаименованию(СтруктураПодключения.PARTNERCODE);
	Если Не ЗначениеЗаполнено(Партнер) Тогда
		ПартнерОбъект = Справочники.Партнеры.СоздатьЭлемент();
		ПартнерОбъект.Наименование = СтруктураПодключения.PARTNERCODE;
		ПартнерОбъект.PARTNERCODE =  СтруктураПодключения.PARTNERCODE;
		ПартнерОбъект.Записать();
		Партнер = ПартнерОбъект.Ссылка;
	КонецЕсли;
	
	НаборДанных = РегистрыСведений.РегистрацияСервисовРС.СоздатьНаборЗаписей();
	
	Если ЗначениеЗаполнено(ПользовательСервиса) Тогда
		НаборДанных.Отбор.ПользовательСервиса.Установить(ПользовательСервиса);
	КонецЕсли;
	
	НаборДанных.Отбор.IDDOCREQUEST.Установить(СтруктураПодключения.IDDOCREQUEST);
	
	Если ЗначениеЗаполнено(Сервис.ИмяПредопределенныхДанных) тогда
		НаборДанных.Отбор.IDSERVICEVA.Установить(Сервис.ИмяПредопределенныхДанных);
	КонецЕсли;
	
	Если Не Партнер.Пустая() Тогда
		НаборДанных.Отбор.Партнер.Установить(Партнер);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Сервис) Тогда
		НаборДанных.Отбор.Сервис.Установить(Сервис);
	КонецЕсли;
	
	НаборДанных.Прочитать();	
	
	Если НаборДанных.Количество() > 0 Тогда
		НовСтр = НаборДанных[0];
	Иначе
		НовСтр = НаборДанных.Добавить();
		НовСтр.IDSERVICE = Новый УникальныйИдентификатор();	
	КонецЕсли;
	
	Если ЭтоБесплатныйСервис(Сервис)   Тогда
		НовСтр.Включен = Истина;
		НовСтр.STATUS = Перечисления.СтатусыСервисовИТС.Активирован;
	Иначе
		НовСтр.Включен = Ложь;
		НовСтр.STATUS = Перечисления.СтатусыСервисовИТС.Принято;
	КонецЕсли;
	
	СтруктураПодключения.Вставить("STATUS", НовСтр.STATUS);
	
	НовСтр.ПользовательСервиса = ПользовательСервиса;
	НовСтр.Сервис = Сервис;		
	Попытка
		НовСтр.ДатаДействияС = Дата(СтруктураПодключения.DATEBEGIN);
		НовСтр.ДатаДействияПо = Дата(СтруктураПодключения.DATEEND);
	Исключение	
		//ИТССервисыСлужебныеПроцедурыФункции.ОтослатьПисьмо("ДобавитьСервис", СтруктураПодключения.телоЗапроса, ОписаниеОшибки());
	КонецПопытки;			
	НовСтр.Партнер = Партнер;	
	НовСтр.IDDOCREQUEST = СтруктураПодключения.IDDOCREQUEST;
	НовСтр.IDSERVICEVA = Сервис.ИмяПредопределенныхДанных;
	НовСтр.IDREQUEST = СтруктураПодключения.IDREQUEST;
	НовСтр.NAMECUSTOMER = СтруктураПодключения.NAMECUSTOMER;
	НовСтр.IDCUSTOMER = СтруктураПодключения.IDCUSTOMER;

	СтруктураПодключения.Вставить("IDSERVICE", НовСтр.IDSERVICE);
	Попытка
		НаборДанных.Записать(Истина);
	Исключение
	//	ИТССервисыСлужебныеПроцедурыФункции.ОтослатьПисьмо("ДобавитьСервис", СтруктураПодключения.ТелоЗапроса, ОписаниеОшибки());
		Отказ = истина
	КонецПопытки;	
КонецПроцедуры	

Функция ЭтоБесплатныйСервис(Сервис) Экспорт
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Сервисы.Ссылка,
		|	Сервисы.БесплатныйСервис  КАК  БесплатныйСервис
		|ИЗ
		|	Справочник.Сервисы КАК Сервисы
		|ГДЕ
		|	Сервисы.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Сервис);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат   Истина;
	КонецЦикла;
	
	Возврат Ложь
		
КонецФункции	