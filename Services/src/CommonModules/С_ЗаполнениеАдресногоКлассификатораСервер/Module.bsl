
Процедура ЗагрузкаФайла() Экспорт
	
	Попытка	
	
	МассивСообщений = Новый Массив;
	
	Профиль = новый ИнтернетПочтовыйПрофиль;
	Профиль.АдресСервераPOP3 = "mail.1c-minsk.by";
	Профиль.АдресСервераSMTP = "mail.1c-minsk.by";
	Профиль.ПортPOP3 =110;
	Профиль.ПортSMTP = 25;
	Профиль.Пользователь ="serv_its@1c-minsk.by";
	Профиль.Пароль = "ServiceITS16";

	
	Почта = Новый ИнтернетПочта;
	Почта.Подключиться(Профиль);
	МассивЗаголовков = Новый Массив;
	МассивЗаголовков.Добавить("Адресный классификатор");
	МассивЗаголовков.Добавить("Адресный");
	
	МассивСообщений = Почта.Выбрать(Ложь);
	
	Если МассивСообщений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Для Индекс = 0 По МассивСообщений.Количество() - 1 Цикл  		
		
		Тема = "Адресный классификатор";
		Если МассивСообщений[Индекс].Тема = Тема Тогда
			Попытка
				ИмяВременногоФайла = ПолучитьИмяВременногоФайла("zip");
				
				МассивСообщений[Индекс].Вложения[0].Данные.Записать(ИмяВременногоФайла);
				
				МассивУдаляемыхСообщений = Новый Массив;
				МассивУдаляемыхСообщений.Добавить(МассивСообщений[Индекс]);
				Почта.УдалитьСообщения(МассивУдаляемыхСообщений);	
				
			Исключение
				Возврат;
			КонецПопытки;
		КонецЕсли;
		
	КонецЦикла;
	
	Почта.Отключиться();
	
	НачатьТранзакцию();
	
	НаборЗаписей = РегистрыСведений.С_АдресныйКлассификатор.СоздатьНаборЗаписей();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();

	КаталогВременныхФайлов = РаспаковкаФайла(ИмяВременногоФайла);	
	
	
	ЗапуститьФоновуюЗагрузкуНаСервере(КаталогВременныхФайлов);
	
	ЗаполнитьСправочникОбновлениеАдресногоКлассификатора();
	
	ЗафиксироватьТранзакцию();
	
	Константы.С_ДатаОбновленияАдресногоКлассификатора.Установить(ТекущаяДата());
	
	Профиль = новый ИнтернетПочтовыйПрофиль;
	Профиль.АдресСервераSMTP = "mail.1c-minsk.by";
	Профиль.ПользовательSMTP ="serv_its@1c-minsk.by";
	Профиль.ПарольSMTP ="ServiceITS16";
	Профиль.ПортSMTP = 25;
	Профиль.АдресСервераSMTP = СпособSMTPАутентификации.Login;
	
	Почта = Новый ИнтернетПочта;
	
	Письмо = Новый ИнтернетПочтовоеСообщение;
	Текст = Письмо.Тексты.Добавить("Загрузка адресного классификатора от "+ТекущаяДата()+" выполнена успешно!");
	Текст.ТипТекста = ТипТекстаПочтовогоСообщения.ПростойТекст;
	Письмо.Тема = "Загрузка адресного классификатора выполнена успешно!"; 
	Письмо.Отправитель = "serv_its@1c-minsk.by";
	Письмо.ИмяОтправителя = "АдресныйКлассификатор";
	//Письмо.Получатели.Добавить("1cServic@mail.ru");
	Письмо.Получатели.Добавить("savo@1c-minsk.by");
    Письмо.Получатели.Добавить("inna.scorpio@gmail.com");	
    Письмо.Получатели.Добавить("rava@1c-minsk.by");	
	Почта.Подключиться(Профиль);
	Почта.Послать(Письмо);
	Почта.Отключиться();
	
	
	Исключение
		
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
	Профиль = новый ИнтернетПочтовыйПрофиль;
    Профиль.АдресСервераSMTP = "mail.1c-minsk.by";
    Профиль.ПользовательSMTP ="serv_its@1c-minsk.by";
    Профиль.ПарольSMTP ="ServiceITS16";
    Профиль.ПортSMTP = 25;
    Профиль.АдресСервераSMTP = СпособSMTPАутентификации.Login;
    
    Почта = Новый ИнтернетПочта;
    
    Письмо = Новый ИнтернетПочтовоеСообщение;
    Текст = Письмо.Тексты.Добавить(ОписаниеОшибки());
    Текст.ТипТекста = ТипТекстаПочтовогоСообщения.ПростойТекст;
    Письмо.Тема = "Ошибка загрузки Адресного классификатора!"; 
    Письмо.Отправитель = "serv_its@1c-minsk.by";
    Письмо.ИмяОтправителя = "АдресныйКлассификатор";
	Письмо.Получатели.Добавить("1cServic@mail.ru");
	Письмо.Получатели.Добавить("savo@1c-minsk.by");
    Письмо.Получатели.Добавить("inna.scorpio@gmail.com");	
    Письмо.Получатели.Добавить("rava@1c-minsk.by");	
	Почта.Подключиться(Профиль);
    Почта.Послать(Письмо);
    Почта.Отключиться();
		
	КонецПопытки;
	
КонецПроцедуры

Функция РаспаковкаФайла(ИмяВременногоФайла)
	
	КаталогВременныхФайлов = КаталогВременныхФайлов();
	
	ФайлАрхива = Новый ЧтениеZIPФайла(ИмяВременногоФайла);
	ФайлАрхива.ИзвлечьВсе(КаталогВременныхФайлов);

	ПереместитьФайл(КаталогВременныхФайлов + "Реестр наименований улиц и дорог.DBF", КаталогВременныхФайлов + "NNUL.DBF");
	ПереместитьФайл(КаталогВременныхФайлов + "Реестр АТЕ и ТЕ.DBF", КаталогВременныхФайлов + "CITY.DBF");
	                                          
	возврат КаталогВременныхФайлов; 
Конецфункции

Процедура ЗапуститьФоновуюЗагрузкуНаСервере(КаталогВременныхФайлов)
	
	КодыРегионов   = Новый Массив; //Параметры[0];	// Массив кодов регионов для загрузки
	КодыРегионов.Добавить(1);
	КодыРегионов.Добавить(2);
	КодыРегионов.Добавить(3);
	КодыРегионов.Добавить(4);
	КодыРегионов.Добавить(5);
	КодыРегионов.Добавить(6);
	КодыРегионов.Добавить(7);
	
	РабочийКаталог = С_АдресныйКлассификаторКлиентСервер.ДобавитьКонечныйРазделительПути(ПолучитьИмяВременногоФайла());
	СоздатьКаталог(РабочийКаталог);
	
	ПереместитьФайл(КаталогВременныхФайлов + "NNUL.DBF", РабочийКаталог + "NNUL.DBF");
	ПереместитьФайл(КаталогВременныхФайлов + "CITY.DBF", РабочийКаталог + "CITY.DBF");
	
	ВерсииФайлов = Новый Соответствие;
	
	// Определяем даты - версии и формируем массив для загрузки
	АдресныеОбъекты = Новый Массив;
	ДоступныеВерсии = Новый Соответствие;
	
	// Сокращения
	АдресныеОбъекты.Добавить("SO");
	
	ЗагружаемаяВерсияСейчас = ТекущаяУниверсальнаяДата();
	
	ИмяФайла = РабочийКаталог +"CITY.DBF"; 
	
	//ЗагружаемаяВерсия  = ВерсииФайлов[ИмяФайла];
	//Если ЗагружаемаяВерсия  = Неопределено Тогда
	ЗагружаемаяВерсия = ЗагружаемаяВерсияСейчас;
	//КонецЕсли;
	
	Для Каждого КодРегиона Из КодыРегионов Цикл
		АдресныйОбъект = Формат(КодРегиона, "ЧЦ=2; ЧН=; ЧВН=; ЧГ=");
		АдресныеОбъекты.Добавить(АдресныйОбъект);
		
		ДоступныеВерсии.Вставить(АдресныйОбъект, ЗагружаемаяВерсия);
	КонецЦикла;
	//КонецЕсли;
	
	ПараметрыЗагрузки = Новый Структура;
	ПараметрыЗагрузки.Вставить("АдресныеОбъекты",           АдресныеОбъекты);
	ПараметрыЗагрузки.Вставить("ПутьКДаннымНаСервере",      РабочийКаталог);
	ПараметрыЗагрузки.Вставить("ВерсияЗагружаемогоКЛАДР",   ЗагружаемаяВерсия);
	ПараметрыЗагрузки.Вставить("ИсточникДанныхДляЗагрузки",  2);
	ПараметрыЗагрузки.Вставить("ДоступныеВерсии",           ДоступныеВерсии);
	
	// Собственно загрузка
	С_АдресныйКлассификаторСервер.ЗагрузкаАдресныхСведенийИзФайловКЛАДРВРегистрСведений(ПараметрыЗагрузки, Неопределено);
	
	// И чистим за собой
	Попытка
		УдалитьФайлы(РабочийКаталог);
	Исключение
		// Обработка не требуется, файлы будут удалены позднее
	КонецПопытки;
	
	// Обновляем состав регионов
	РегистрыСведений.С_АдресныйКлассификатор.ОбновитьСоставСубъектовРФПоКлассификатору();
КонецПроцедуры

Процедура ОбработатьНаСервере()
	
	//удалим не нужные строки
	НачатьТранзакцию();
	Попытка
		ТаблицаОставляемыхЗаписей = ПолучитьТаблицуАдресногоКлассификатора();	
		
		НаборЗаписей = РегистрыСведений.С_АдресныйКлассификатор.СоздатьНаборЗаписей(); 
		
		Если ТаблицаОставляемыхЗаписей.Найти(50000000010000000000, "Код") <> Неопределено Тогда
			ТаблицаОставляемыхЗаписей.Найти(50000000010000000000, "Код").ТипАдресногоЭлемента = 1;
		КонецЕсли;
		
		Для Каждого Стр Из ТаблицаОставляемыхЗаписей Цикл 
			
			Если Стр.Сокращение = "г." Тогда
				
				Если Стр.КодРайонаВКоде <> 0 Тогда
			         Стр.КодРайонаВКоде = 0;
				 КонецЕсли;
			КонецЕсли;	 
			
		КонецЦикла;	
		
		
		НаборЗаписей.Загрузить(ТаблицаОставляемыхЗаписей);
		НаборЗаписей.Записать();
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
	КонецПопытки;

КонецПроцедуры

Функция  ПолучитьТаблицуАдресногоКлассификатора()
	
	Запрос = Новый Запрос;
	Запрос.Текст ="ВЫБРАТЬ
	              |	*
	              |ИЗ
	              |	РегистрСведений.С_АдресныйКлассификатор КАК АдресныйКлассификатор
	              |ГДЕ
	              |	АдресныйКлассификатор.Код <> 50000000000000000000";
				  
	ТаблицаОставляемыхЗаписей = Запрос.Выполнить().Выгрузить();	
	
	Возврат ТаблицаОставляемыхЗаписей;
	
КонецФункции

Процедура ЗаполнитьСправочникОбновлениеАдресногоКлассификатора () Экспорт
	
	ОбработатьНаСервере();
	
	Справочник = Справочники.С_ОбновлениеАдресногоКлассификатора.АдресныйКлассификатор.ПолучитьОбъект();
	Справочник.ДатаАдресногоКлассификатора = ТекущаяДата();
	Справочник.Записать();

	МассивОбластей = Новый Массив(7);
	ОбластьВыгрузки = 7;
	
	// инициализируем их значениями
	МассивОбластей[0] = Число(10000000000000000000);
	МассивОбластей[1] = Число(20000000000000000000);
	МассивОбластей[2] = Число(30000000000000000000); 
	МассивОбластей[3] = Число(40000000000000000000); 
	МассивОбластей[4] = Число(50000000010000000000); 
	МассивОбластей[5] = Число(60000000000000000000);
	МассивОбластей[6] = Число(70000000000000000000);
	
	РезультатПоискаТекст = Справочники.С_ОбновлениеАдресногоКлассификатора.АдресныйКлассификатор.ПолучитьОбъект();
	
	Для Счт = 1 по ОбластьВыгрузки Цикл 
		
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("МассивРегионов", Счт);
		запрос.УстановитьПараметр("МассивОбластей", МассивОбластей);
		
		Запрос.Текст ="ВЫБРАТЬ
		| АдресныйКлассификатор_Локализация_Без_Регионов.ТипАдресногоЭлемента,
		| АдресныйКлассификатор_Локализация_Без_Регионов.КодАдресногоОбъектаВКоде,
		| АдресныйКлассификатор_Локализация_Без_Регионов.КодРайонаВКоде,
		| АдресныйКлассификатор_Локализация_Без_Регионов.КодГородаВКоде,
		| АдресныйКлассификатор_Локализация_Без_Регионов.КодНаселенногоПунктаВКоде,
		| АдресныйКлассификатор_Локализация_Без_Регионов.КодУлицыВКоде,
		| АдресныйКлассификатор_Локализация_Без_Регионов.Код КАК Код,
		| АдресныйКлассификатор_Локализация_Без_Регионов.Наименование,
		| АдресныйКлассификатор_Локализация_Без_Регионов.Сокращение,
		| АдресныйКлассификатор_Локализация_Без_Регионов.Индекс,
		| АдресныйКлассификатор_Локализация_Без_Регионов.АльтернативныеНазвания,
		| АдресныйКлассификатор_Локализация_Без_Регионов.ПризнакАктуальности
		|ИЗ
		| РегистрСведений.С_АдресныйКлассификатор КАК АдресныйКлассификатор_Локализация_Без_Регионов
		|ГДЕ
		| АдресныйКлассификатор_Локализация_Без_Регионов.КодАдресногоОбъектаВКоде В(&МассивРегионов) И НЕ
		| АдресныйКлассификатор_Локализация_Без_Регионов.Код В (&МассивОбластей)
		|
		|УПОРЯДОЧИТЬ ПО
		| Код";
		
		
		РезЗапроса = Запрос.Выполнить().Выгрузить();
		
		ТабДокумент = Новый ТабличныйДокумент;
		
		Заголовки = Новый Структура;
		ОбластьВывода = ТабДокумент.ПолучитьОбласть(1, 1, 1, РезЗапроса.Колонки.Количество());
		Для Счетчик = 1 по РезЗапроса.Колонки.Количество() Цикл
			ОбластьЗаполнения = ОбластьВывода.Область(1, Счетчик, 1, Счетчик);
			Колонка = РезЗапроса.Колонки[Счетчик-1];
			ОбластьЗаполнения.Параметр = Колонка.Имя;
			ОбластьЗаполнения.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Параметр;
			Заголовки.Вставить(Колонка.Имя, Колонка.Имя);
		КонецЦикла;
		ОбластьВывода.Параметры.Заполнить(Заголовки);
		ТабДокумент.Вывести(ОбластьВывода);
		
		Выборка=Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ОбластьВывода.Параметры.Заполнить(Выборка);
			ТабДокумент.Вывести(ОбластьВывода);
		КонецЦикла;
		
		//КонвертироватьВXML 
		Колонок = ТабДокумент.ШиринаТаблицы;
		ИменаКолонок = Новый Массив;
		ИменаКолонокСтр = "";
		Для Сч = 1 По Колонок Цикл
			ИмяТаблицы = ТабДокумент.Область(1, Сч).Текст;
			ИменаКолонок.Добавить(ИмяТаблицы);
			ИменаКолонокСтр = ИменаКолонокСтр + ?(Сч = 1, "", ",") + ИмяТаблицы;
		КонецЦикла;
		
		Запись = Новый ЗаписьXML;
		Запись.УстановитьСтроку("UTF-8");
		Запись.ЗаписатьНачалоЭлемента("Items");
		
		Для СчСтр = 2 По ТабДокумент.ВысотаТаблицы Цикл
			Запись.ЗаписатьНачалоЭлемента("Item");
			Для СчКол = 1 По Колонок Цикл
				Запись.ЗаписатьАтрибут(ИменаКолонок[СчКол-1], ТабДокумент.Область(СчСтр, СчКол).Текст);
			КонецЦикла;
			Запись.ЗаписатьКонецЭлемента();
		КонецЦикла;
		
		Запись.ЗаписатьКонецЭлемента();
		
		РезультатПоискаТекст["Текст" + Строка(Счт)] = Запись.Закрыть();
		РезультатПоискаТекст["Текст" + Строка(Счт)]  = СтрЗаменить(РезультатПоискаТекст["Текст" + Строка(Счт)], "<Items>" + Символы.ПС, "");
		РезультатПоискаТекст["Текст" + Строка(Счт)]  = СтрЗаменить(РезультатПоискаТекст["Текст" + Строка(Счт)], "</Items>" , "");
		
		ОбластьВывода.Очистить();
		ТабДокумент.Очистить();
		
	КонецЦикла; 
	
	РезультатПоискаТекст.Записать();
	
КонецПроцедуры