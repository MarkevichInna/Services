
#Область Организация

Процедура ОбработатьОрганизацию(ОбъектОрганизация, ТекстОшибки, Отказ)Экспорт
	
	//ОбъектОрганизация    = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	
	ОрганизацияXDTO = ОбъектОрганизация.Организации.Организация;
	
	Если ТипЗнч(ОрганизацияXDTO) = Тип("ОбъектXDTO") Тогда
		
		ОбработатьЭлемент(ОрганизацияXDTO, ТекстОшибки, Отказ);
		
	ИначеЕсли 	ТипЗнч(ОрганизацияXDTO) = Тип("СписокXDTO") ТОгда
		
		Для каждого элт Из  ОрганизацияXDTO Цикл
			ОбработатьЭлемент(элт, ТекстОшибки, Отказ);
		КонецЦикла;
		
	КонецЕсли;
	
	
КонецПроцедуры	

Процедура ОбработатьЭлемент(Организация, ТекстОшибки, Отказ)
	
	Попытка
		КлючевыеСвойства     = Организация.КлючевыеСвойства;
		СвойстваОрганизации = Организация.Свойства();
		КонтактнаяИнформация = Неопределено;
		КонтактныеЛица = Неопределено; 
		БанковскиеСчета = Неопределено;
		
		Если  СвойстваОрганизации.Получить("КонтактнаяИнформация") <> Неопределено Тогда
			КонтактнаяИнформация = Организация.КонтактнаяИнформация.Строка;
		КонецЕсли;
		
		Если  СвойстваОрганизации.Получить("БанковскиеСчета") <> Неопределено Тогда
			БанковскиеСчета		 = Организация.БанковскиеСчета.Строка;
		КонецЕсли;
		
		Если  СвойстваОрганизации.Получить("КонтактныеЛица") <> Неопределено Тогда
			КонтактныеЛица		 = Организация.КонтактныеЛица.Строка;
		КонецЕсли;	 
		
		ОрганизацияСсылка = Справочники.С_Организации.НайтиПоРеквизиту("ИНН", СокрЛП(КлючевыеСвойства.ИНН));
		
		Если  ОрганизацияСсылка.Пустая() Тогда
			ОрганизацияОбъект = Справочники.С_Организации.СоздатьЭлемент();
			ОрганизацияОбъект.ИНН = СокрЛП(КлючевыеСвойства.Инн);
			//Если  КлючевыеСвойства.ЮридическоеФизическоеЛицо = "ЮридическоеЛицо" Тогда
			ОрганизацияОбъект.ЮрФизЛицо =   "ЮридическоеЛицо";
			
			//Для Каждого элт Из  Организация.КлючевыеСвойства.свойства() Цикл
			//	ЗаполнитьЗначенияСвойств(ОрганизацияОбъект, Организация.КлючевыеСвойства[элт.Имя]);
			//КонецЦикла;
			
		Иначе
			ОрганизацияОбъект = ОрганизацияСсылка.ПолучитьОбъект();
		КонецЕсли;
		
		ОрганизацияОбъект.Наименование = КлючевыеСвойства.Наименование;
		ОрганизацияОбъект.НаименованиеСокращенное = КлючевыеСвойства.НаименованиеСокращенное;
		ОрганизацияОбъект.НаименованиеПолное = КлючевыеСвойства.НаименованиеПолное;	
		   
		Если  КлючевыеСвойства.свойства().получить("ВзаимозависимоеЛицо") <> Неопределено Тогда
			ОрганизацияОбъект.ВзаимозависимоеЛицо = КлючевыеСвойства.ВзаимозависимоеЛицо;
		КонецЕсли;	
		
		Если  КлючевыеСвойства.свойства().получить("РезидентОффшорнойЗоны") <> Неопределено Тогда
			ОрганизацияОбъект.РезидентОффшорнойЗоны = КлючевыеСвойства.РезидентОффшорнойЗоны;
		КонецЕсли;
		
		Если  КлючевыеСвойства.свойства().получить("СделкаСТоварамиПоПеречню") <> Неопределено Тогда
			ОрганизацияОбъект.СделкаСТоварамиПоПеречню = КлючевыеСвойства.СделкаСТоварамиПоПеречню;
		КонецЕсли;
		
		Если  КлючевыеСвойства.свойства().получить("КрупныйПлательщикНДС") <> Неопределено Тогда
			ОрганизацияОбъект.КрупныйПлательщикНДС = КлючевыеСвойства.КрупныйПлательщикНДС;
		КонецЕсли;	
		
		Если Организация.КлючевыеСвойства.свойства().получить("НомерОсновногоСчета") <> Неопределено Тогда 
			ОрганизацияОбъект.НомерОсновногоСчета = КлючевыеСвойства.НомерОсновногоСчета;
		КонецЕсли;
		
		Если Организация.КлючевыеСвойства.свойства().получить("КодФилиала") <> Неопределено Тогда 
			ОрганизацияОбъект.КодФилиала = КлючевыеСвойства.КодФилиала;
		КонецЕсли;
		
		
		НачатьТранзакцию();
		
		ОрганизацияОбъект.Подтвержден = истина;
		ОрганизацияОбъект.Записать();
		ОбработатьОбъект(ОрганизацияОбъект.Ссылка, КонтактнаяИнформация, БанковскиеСчета, КонтактныеЛица);
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;	
		Отказ = Истина;
		ТекстОшибки = ОписаниеОшибки();
		ТекстОшибки = "ORG_ERROR";
		
	КонецПопытки;
	
	
КонецПроцедуры	

Процедура ОбработатьОбъект(Объект, КонтактнаяИнформация, БанковскиеСчета, КонтактныеЛица)
	
	Если  КонтактнаяИнформация <> Неопределено Тогда
		НаборыУНП =  РегистрыСведений.С_ВерсииКонтактнойИнформации.СоздатьНаборЗаписей();
		
		НаборыУНП.Отбор.Организация.Установить(Объект);
		НаборыУНП.Прочитать();
		НаборыУНП.Очистить();
		
		Если ТипЗнч(КонтактнаяИнформация) = Тип("ОбъектXDTO") Тогда
			ЗаполнитьСтрокуКИ(НаборыУНП, Объект, КонтактнаяИнформация);
		ИначеЕсли ТипЗнч(КонтактнаяИнформация) = Тип("СписокXDTO") Тогда
			Для каждого стрСП ИЗ  КонтактнаяИнформация Цикл
				ЗаполнитьСтрокуКИ(НаборыУНП, Объект, стрСП);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если  КонтактныеЛица <> Неопределено Тогда
		НаборыУНП =  РегистрыСведений.С_ВерсииКонтактов.СоздатьНаборЗаписей();
		НаборыУНП.Отбор.Организация.Установить(Объект);		
		НаборыУНП.Прочитать();
		НаборыУНП.Очистить();
		
		Если ТипЗнч(КонтактныеЛица) = Тип("ОбъектXDTO") Тогда
			ЗаполнитьСтрокуКЛ(НаборыУНП, Объект, КонтактныеЛица);	
		ИначеЕсли ТипЗнч(КонтактныеЛица) = Тип("СписокXDTO") Тогда
			Для каждого стрСП ИЗ  КонтактныеЛица Цикл
				ЗаполнитьСтрокуКЛ(НаборыУНП, Объект, стрСП);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если  БанковскиеСчета <> Неопределено Тогда
		НаборыУНП =  РегистрыСведений.С_ВерсииБанковскихСчетов.СоздатьНаборЗаписей();
		НаборыУНП.Отбор.Организация.Установить(Объект);
		НаборыУНП.Прочитать();
		НаборыУНП.Очистить();
		
		Если ТипЗнч(БанковскиеСчета) = Тип("ОбъектXDTO") Тогда	 	
			ЗаполнитьСтрокуБС(НаборыУНП, Объект, БанковскиеСчета);
		ИначеЕсли ТипЗнч(БанковскиеСчета) = Тип("СписокXDTO") Тогда		
			Для каждого стрСП ИЗ  БанковскиеСчета Цикл
				ЗаполнитьСтрокуБС(НаборыУНП, Объект, стрСП);
			КонецЦикла;
		КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры	


#КонецОбласти

#Область Контрагенты

Функция ПолучитьДанныеИзБазыПоКонтрагенту(МассивУНП)Экспорт
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Контрагенты");
	СтруктураВозврата.Вставить("КонтактнаяИнформация");
	СтруктураВозврата.Вставить("КонтактныеЛица");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.ИНН,
	|	Организации.Наименование КАК Наименование,
	|	Организации.НаименованиеПолное КАК НаименованиеПолное,
	|	Организации.НаименованиеСокращенное КАК НаименованиеСокращенное,
	|	Организации.ЮрФизЛицо КАК ЮрФизЛицо,
	|	Организации.ВзаимозависимоеЛицо,
	|	Организации.РезидентОффшорнойЗоны,
	|	Организации.СделкаСТоварамиПоПеречню,
	|	Организации.КрупныйПлательщикНДС,
	|	Организации.КодФилиала,
	|	Организации.НомерОсновногоСчета
	|ИЗ
	|	Справочник.С_Организации КАК Организации
	|ГДЕ
	|	Организации.ИНН В(&ИНН)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОрганизацииКонтактнаяИнформация.Вид КАК Вид,
	|	ОрганизацииКонтактнаяИнформация.Тип КАК Тип,
	|	ОрганизацииКонтактнаяИнформация.Представление КАК Представление,
	|	ОрганизацииКонтактнаяИнформация.Период КАК Версия
	|ИЗ
	|	РегистрСведений.С_ВерсииКонтактнойИнформации.СрезПоследних(, Организация.ИНН В (&ИНН)) КАК ОрганизацииКонтактнаяИнформация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВерсииКонтактовСрезПоследних.Фамилия КАК Фамилия,
	|	ВерсииКонтактовСрезПоследних.Имя КАК Имя,
	|	ВерсииКонтактовСрезПоследних.Отчество КАК Отчество,
	|	ВерсииКонтактовСрезПоследних.Телефон КАК Телефон,
	|	ВерсииКонтактовСрезПоследних.АдресЭлектроннойПочты КАК АдресЭлектроннойПочты,
	|	ВерсииКонтактовСрезПоследних.Должность КАК Должность,
	|	ВерсииКонтактовСрезПоследних.Период КАК Версия
	|ИЗ
	|	РегистрСведений.С_ВерсииКонтактов.СрезПоследних(, Организация.ИНН В (&ИНН)) КАК ВерсииКонтактовСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВерсииБанковскихСчетов_ЛокализацияСрезПоследних.НомерСчета КАК НомерСчета,
	|	ВерсииБанковскихСчетов_ЛокализацияСрезПоследних.БИК КАК БИК,
	|	ВерсииБанковскихСчетов_ЛокализацияСрезПоследних.КодВалюты КАК КодВалюты,
	|	ВерсииБанковскихСчетов_ЛокализацияСрезПоследних.Период КАК Версия,
	|	ВерсииБанковскихСчетов_ЛокализацияСрезПоследних.Закрыт КАК Закрыт,
	|	ВерсииБанковскихСчетов_ЛокализацияСрезПоследних.ТекстКорреспондента КАК ТекстКорреспондента,
	|	ВерсииБанковскихСчетов_ЛокализацияСрезПоследних.ТекстНазначения КАК ТекстНазначения
	|ИЗ
	|	РегистрСведений.С_ВерсииБанковскихСчетов.СрезПоследних(, Организация.ИНН В (&ИНН)) КАК ВерсииБанковскихСчетов_ЛокализацияСрезПоследних";
	
	Запрос.УстановитьПараметр("ИНН", МассивУНП);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	СтруктураВозврата.Вставить("Контрагенты",РезультатЗапроса[0]);
	СтруктураВозврата.Вставить("КонтактнаяИнформация",РезультатЗапроса[1]);
	СтруктураВозврата.Вставить("КонтактныеЛица",      РезультатЗапроса[2]);
	СтруктураВозврата.Вставить("БанковскиеСчета",     РезультатЗапроса[3]);
	
	Возврат   СтруктураВозврата;
	
КонецФункции	

Функция ПолучитьДанныеИзБазыКонтактыОбновления(ТаблицаКонтакты)Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТаблицаКонтакты.УНП КАК СТРОКА(9)) КАК УНП,
	|	ТаблицаКонтакты.Версия
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	&ТаблицаКонтакты КАК ТаблицаКонтакты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таб1.УНП,
	|	Таб2.Период КАК версия,
	|	Таб2.Должность,
	|	Таб2.Телефон,
	|	Таб2.АдресЭлектроннойПочты,
	|	Таб2.Отчество,
	|	Таб2.Имя,
	|	Таб2.Фамилия
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВТ.УНП КАК УНП,
	|		МАКСИМУМ(ВерсииКонтактов.Период) КАК ПериодДок
	|	ИЗ
	|		ВТ КАК ВТ
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.С_ВерсииКонтактов КАК ВерсииКонтактов
	|			ПО (ВерсииКонтактов.Период > ВТ.Версия)
	|				И (ВерсииКонтактов.Организация.ИНН = ВТ.УНП)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВТ.УНП) КАК Таб1
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.С_ВерсииКонтактов КАК Таб2
	|		ПО Таб1.ПериодДок = Таб2.Период
	|			И Таб1.УНП = Таб2.Организация.ИНН";
	
	Запрос.УстановитьПараметр("ТаблицаКонтакты", ТаблицаКонтакты);	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено
	КонецЕсли;
	
	Возврат   РезультатЗапроса;
	
КонецФункции	

Функция ПолучитьДанныеИзБазыКИОбновления(ТаблицаКИ)Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТаблицаКИ.УНП КАК СТРОКА(9)) КАК УНП,
	|	ТаблицаКИ.Версия
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	&ТаблицаКИ КАК ТаблицаКИ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таб1.УНП,
	|	Таб2.Период КАК версия,
	|	Таб2.Тип,
	|	Таб2.Вид,
	|	Таб2.Представление
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВТ.УНП КАК УНП,
	|		МАКСИМУМ(ВерсииКонтактов.Период) КАК ПериодДок
	|	ИЗ
	|		ВТ КАК ВТ
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.С_ВерсииКонтактнойИнформации КАК ВерсииКонтактов
	|			ПО (ВерсииКонтактов.Период > ВТ.Версия)
	|				И (ВерсииКонтактов.Организация.ИНН = ВТ.УНП)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВТ.УНП) КАК Таб1
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.С_ВерсииКонтактнойИнформации КАК Таб2
	|		ПО Таб1.ПериодДок = Таб2.Период
	|			И Таб1.УНП = Таб2.Организация.ИНН";
	
	Запрос.УстановитьПараметр("ТаблицаКИ", ТаблицаКИ);	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено
	КонецЕсли;
	
	Возврат   РезультатЗапроса;
	
КонецФункции	

Функция ПолучитьДанныеИзБазыБанковскиеСчетаОбновления(ТаблицаБС)Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТаблицаБС.УНП КАК СТРОКА(9)) КАК УНП,
	|	ТаблицаБС.Версия
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	&ТаблицаБС КАК ТаблицаБС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таб1.УНП,
	|	Таб2.Период КАК версия,
	|	Таб2.БИК,
	|	Таб2.КодВалюты,
	|	Таб2.НомерСчета,
	|	Таб2.ТекстКорреспондента,
	|	Таб2.ТекстНазначения,
	|	Таб2.Закрыт
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВТ.УНП КАК УНП,
	|		МАКСИМУМ(ВерсииКонтактов.Период) КАК ПериодДок
	|	ИЗ
	|		ВТ КАК ВТ
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.С_ВерсииБанковскихСчетов КАК ВерсииКонтактов
	|			ПО (ВерсииКонтактов.Период > ВТ.Версия)
	|				И (ВерсииКонтактов.Организация.ИНН = ВТ.УНП)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВТ.УНП) КАК Таб1
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.С_ВерсииБанковскихСчетов КАК Таб2
	|		ПО Таб1.ПериодДок = Таб2.Период
	|			И Таб1.УНП = Таб2.Организация.ИНН";
	
	Запрос.УстановитьПараметр("ТаблицаБС", ТаблицаБС);	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено
	КонецЕсли;
	
	Возврат   РезультатЗапроса;
	
КонецФункции	

Процедура СформироватьXMLПоОбновлениям(ВерсииКонтактов, ВерсииКонтактнойИнформации, ВерсииБанковскихСчетов, СтруктураПараметров, Ответ, ТекстОшибки, Отказ)Экспорт
	
	ПространствоИменСхемы = "http://FreeOrgInfo";
	
	ОбъектОрганизации      = ПолучитьОбъектТипаCML("Организации", ПространствоИменСхемы);
	
	МассивУНП = Новый Массив;
	
	ДанныеКонтакты  = Неопределено;
	ДанныеКИ = Неопределено;
	ДанныеБС = Неопределено;
	
	Если ВерсииКонтактов <> Неопределено Тогда
		
		МассивКонтактов = МассивПодстрок(ВерсииКонтактов,";"); //УНП=Дата
		ТаблицаКонтакты = ПолучитьТаблицуЗначений();
		
		Если ЗначениеЗаполнено(МассивКонтактов) Тогда
			
			Для каждого конт из МассивКонтактов Цикл
				
				СтрокаКонт = СтрЗаменить(конт,"Версия", Символы.ВК);
				УНП = СтрЗаменить(СтрПолучитьСтроку(СтрокаКонт, 1),"УНП=","");
				
				Если МассивУНП.Найти(УНП) = Неопределено Тогда
					МассивУНП.Добавить(УНП);
				КонецЕсли;
				
				Версия = СтрЗаменить(СтрПолучитьСтроку(СтрокаКонт, 2),"=","");
				ДатаВерсия = Дата(Сред(Версия,7,4) + Сред(Версия,4,2) + Лев(Версия,2));
				
				СтрКонтакты = ТаблицаКонтакты.Добавить();
				СтрКонтакты.УНП = СокрЛП(УНП);
				СтрКонтакты.Версия = ДатаВерсия;
				
				
			КонецЦикла;
			
			ДанныеКонтакты = ПолучитьДанныеИзБазыКонтактыОбновления(ТаблицаКонтакты);
			
			Если   ДанныеКонтакты <> Неопределено Тогда
				ДанныеКонтакты = ДанныеКонтакты.Выгрузить();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВерсииКонтактнойИнформации <> Неопределено Тогда
		
		
		МассивКИ = МассивПодстрок(ВерсииКонтактнойИнформации,";"); //УНП=Дата
		
		Если ЗначениеЗаполнено(МассивКИ) Тогда
			ТаблицаКи = ПолучитьТаблицуЗначений();
			
			Для каждого конт из МассивКИ Цикл
				СтрокаКонт = СтрЗаменить(конт, "Версия", Символы.ВК);
				
				УНП = СтрЗаменить(СтрПолучитьСтроку(СтрокаКонт, 1),"УНП=","");
				
				Если МассивУНП.Найти(УНП) = Неопределено Тогда
					МассивУНП.Добавить(УНП);
				КонецЕсли;
				
				Версия = СтрЗаменить(СтрПолучитьСтроку(СтрокаКонт, 2),"=","");
				ДатаВерсия = Дата(Сред(Версия,7,4) + Сред(Версия,4,2) + Лев(Версия,2));
				
				СтрКИ = ТаблицаКИ.Добавить();
				СтрКИ.УНП = СокрЛП(УНП);
				СтрКИ.Версия = ДатаВерсия;
				
				
			КонецЦикла;
			
			ДанныеКИ = ПолучитьДанныеИзБазыКИОбновления(ТаблицаКИ);
			Если ДанныеКИ <> Неопределено Тогда
				ДанныеКИ = ДанныеКИ.выгрузить();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВерсииБанковскихСчетов <> Неопределено Тогда
		
		МассивБС = МассивПодстрок(ВерсииБанковскихСчетов,";"); //УНП=Дата
		Если ЗначениеЗаполнено(МассивБС) Тогда
			ТаблицаБС = ПолучитьТаблицуЗначений();
			Для каждого бс ИЗ МассивБС Цикл
				СтрокаКонт = СтрЗаменить(бс, "Версия", Символы.ВК);
				УНП = СтрЗаменить(СтрПолучитьСтроку(СтрокаКонт, 1),"УНП=","");
				Если МассивУНП.Найти(УНП) = Неопределено Тогда
					МассивУНП.Добавить(УНП);
				КонецЕсли;
				Версия = СтрЗаменить(СтрПолучитьСтроку(СтрокаКонт, 2),"=","");
				ДатаВерсия = Дата(Сред(Версия,7,4) + Сред(Версия,4,2) + Лев(Версия,2));
				СтрКИ = ТаблицаБС.Добавить();
				СтрКИ.УНП = СокрЛП(УНП);
				СтрКИ.Версия = ДатаВерсия;
			КонецЦикла;
			
			ДанныеБС = ПолучитьДанныеИзБазыБанковскиеСчетаОбновления(ТаблицаБС);
			
			Если данныеБС <> Неопределено Тогда
				ДанныеБС = ДанныеБС.Выгрузить();
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	
	Для каждого элт Из МассивУНП Цикл
		
		ЕстьДанные = Ложь;
		ОбъектОрганизация = ПолучитьОбъектТипаCML("Организация", ПространствоИменСхемы);
		КлючевыеСвойстваОрганизация      = ПолучитьОбъектТипаCML("КлючевыеСвойстваОрганизация", ПространствоИменСхемы);
		КлючевыеСвойстваОрганизация.ИНН =  элт;
		//
		//Если  СтруктураПараметров.ИспользоватьБанки Тогда
		//	КлючевыеСвойстваОрганизация.НомерОсновногоСчета =  Справочники.Организации.НайтиПоРеквизиту("ИНН", элт).НомерОсновногоСчета;
		//КонецЕсли;
		
		Если ДанныеКонтакты <> Неопределено Тогда
			Отбор = Новый Структура;
			Отбор.Вставить("УНП",элт);
			МассивСтрокКонтакты = ДанныеКонтакты.НайтиСтроки(Отбор);
			Если  МассивСтрокКонтакты.Количество() > 0 Тогда
				ЕстьДанные = Истина;
				Версия =  МассивСтрокКонтакты[0].Версия;
				ОбъектКонтактныеЛица = ПолучитьОбъектТипаCML("КонтактныеЛица", ПространствоИменСхемы);
				Для каждого СтрокаКонтакты ИЗ   МассивСтрокКонтакты Цикл
					ОбъектКонтактныеЛицаСтрока = ПолучитьОбъектТипаCML("КонтактныеЛица.Строка", ПространствоИменСхемы);
					ОбъектКонтактныеЛицаСтрока.Должность                = СтрокаКонтакты.Должность;
					ОбъектКонтактныеЛицаСтрока.Имя                      = СтрокаКонтакты.Имя;
					ОбъектКонтактныеЛицаСтрока.Фамилия                  = СтрокаКонтакты.Фамилия;
					ОбъектКонтактныеЛицаСтрока.Отчество                 = СтрокаКонтакты.Отчество;
					
					Если СтруктураПараметров.ИспользоватьАдресный Тогда
						ОбъектКонтактныеЛицаСтрока.Телефон                  = СтрокаКонтакты.Телефон;
						ОбъектКонтактныеЛицаСтрока.АдресЭлектроннойПочты    = СтрокаКонтакты.АдресЭлектроннойПочты;
					КонецЕсли;	
					
					ОбъектКонтактныеЛица["Строка"].Добавить(ОбъектКонтактныеЛицаСтрока);
				КонецЦикла;
				ОбъектКонтактныеЛица.Версия =  СтрокаКонтакты.версия;
				ОбъектОрганизация["КонтактныеЛица"]  = ОбъектКонтактныеЛица;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ДанныеКИ <> Неопределено И СтруктураПараметров.ИспользоватьАдресный Тогда
			Отбор = Новый Структура;
			Отбор.Вставить("УНП",элт);
			МассивСтрокКИ = ДанныеКИ.НайтиСтроки(Отбор);
			Если  МассивСтрокКИ.Количество() > 0 Тогда
				ЕстьДанные = Истина;
				ОбъектКонтактныеДанные = ПолучитьОбъектТипаCML("КонтактнаяИнформация", ПространствоИменСхемы);
				Версия =  МассивСтрокКИ[0].Версия;
				Для каждого строкаКИ ИЗ   МассивСтрокКИ Цикл
					Если СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента Тогда 
						ОбъектКонтактныеДанныеСтрока = ПолучитьОбъектТипаCML("КонтактнаяИнформация.Строка", ПространствоИменСхемы);
						ОбъектКонтактныеДанныеСтрока["ВидКонтактнойИнформации"]          =  "ЮридическийАдрес";
						ОбъектКонтактныеДанныеСтрока["ЗначенияПолей"]                    = СтрокаКИ.Представление;
						ОбъектКонтактныеДанныеСтрока["НаименованиеКонтактнойИнформации"] = "Адрес";
						ОбъектКонтактныеДанные["Строка"].Добавить(ОбъектКонтактныеДанныеСтрока);
					КонецЕсли;
					Если СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента Тогда
						ОбъектКонтактныеДанныеСтрока = ПолучитьОбъектТипаCML("КонтактнаяИнформация.Строка", ПространствоИменСхемы);
						ОбъектКонтактныеДанныеСтрока["ВидКонтактнойИнформации"]             =  "Телефон";
						ОбъектКонтактныеДанныеСтрока["ЗначенияПолей"]= СтрокаКИ.Представление;
						ОбъектКонтактныеДанныеСтрока["НаименованиеКонтактнойИнформации"]    = "Телефон";
						ОбъектКонтактныеДанные["Строка"].Добавить(ОбъектКонтактныеДанныеСтрока);       
					КонецЕсли;
					Если СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента Тогда
						ОбъектКонтактныеДанныеСтрока = ПолучитьОбъектТипаCML("КонтактнаяИнформация.Строка", ПространствоИменСхемы);
						ОбъектКонтактныеДанныеСтрока["ВидКонтактнойИнформации"]             =  "ФактическийАдрес";
						ОбъектКонтактныеДанныеСтрока["ЗначенияПолей"]= СтрокаКИ.Представление;
						ОбъектКонтактныеДанныеСтрока["НаименованиеКонтактнойИнформации"]    = "Адрес";
						ОбъектКонтактныеДанные["Строка"].Добавить(ОбъектКонтактныеДанныеСтрока);
					КонецЕсли;
					Если СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.EmailКонтрагента Тогда
						ОбъектКонтактныеДанныеСтрока = ПолучитьОбъектТипаCML("КонтактнаяИнформация.Строка", ПространствоИменСхемы);
						ОбъектКонтактныеДанныеСтрока["ВидКонтактнойИнформации"] =  "АдресЭлектроннойПочты";
						ОбъектКонтактныеДанныеСтрока["ЗначенияПолей"]= СтрокаКИ.Представление;
						ОбъектКонтактныеДанныеСтрока["НаименованиеКонтактнойИнформации"]= "АдресЭлектроннойПочты";
						ОбъектКонтактныеДанные["Строка"].Добавить(ОбъектКонтактныеДанныеСтрока);
					КонецЕсли;
				КонецЦикла;
				ОбъектКонтактныеДанные.Версия =  Версия;
				ОбъектОрганизация["КонтактнаяИнформация"]  = ОбъектКонтактныеДанные;
			КонецЕсли;
		КонецЕсли;
		
		Если ДанныеБС <> Неопределено  И СтруктураПараметров.ИспользоватьБанки Тогда
			
			Отбор = Новый Структура;
			Отбор.Вставить("УНП",элт);
			МассивСтрокБС = ДанныеБС.НайтиСтроки(Отбор);
			Если МассивСтрокБС.Количество() > 0 Тогда
				ЕстьДанные = Истина;
				ОбъектБанковскиеСчета  = ПолучитьОбъектТипаCML("БанковскиеСчета", ПространствоИменСхемы);
				Версия =  МассивСтрокБС[0].Версия;
				Для каждого текСтрока ИЗ  МассивСтрокБС Цикл
					ОбъектБанковскиеСчетаСтрока = ПолучитьОбъектТипаCML("БанковскиеСчета.Строка", ПространствоИменСхемы);
					ОбъектБанковскиеСчетаСтрока.ТекстКорреспондента  =  текСтрока.ТекстКорреспондента;
					ОбъектБанковскиеСчетаСтрока.ТекстНазначения  =  текСтрока.ТекстНазначения;
					ЗаполнитьЗначенияСвойств(ОбъектБанковскиеСчетаСтрока,текСтрока);
					ОбъектБанковскиеСчета["Строка"].Добавить(ОбъектБанковскиеСчетаСтрока);
				КонецЦикла;
				ОбъектБанковскиеСчета.Версия = Версия;
				ОбъектОрганизация["БанковскиеСчета"]  = ОбъектБанковскиеСчета;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЕстьДанные  Тогда
			ОбъектОрганизация.КлючевыеСвойства = КлючевыеСвойстваОрганизация;
			ОбъектОрганизации["Организация"].Добавить(ОбъектОрганизация);
		КонецЕсли;
		
	КонецЦикла;
	
	
	//ЕстьДанные = Ложь;
	
	//Если ЕстьДанные Тогда
	ИмяФайлаОрганизации = ПолучитьИмяВременногоФайла("xml");
	ЗаписьXML  = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ИмяФайлаОрганизации,  "UTF-8");   //  СтруктураДанных.ПолноеИмяФайла
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	ЗаписьXML.ЗаписатьНачалоЭлемента("Info");
	
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбъектОрганизации, "Организации", , , НазначениеТипаXML.Неявное);
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.Закрыть(); 
	ДвоичныеДанные = Новый ДвоичныеДанные(ИмяФайлаОрганизации);
	Ответ.УстановитьТелоИзДвоичныхДанных(ДвоичныеДанные);
	Попытка
		УдалитьФайлы(ИмяФайлаОрганизации);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

Процедура СформироватьXMLКонтрагента(СтруктураПараметров, Ответ, ТекстОшибки, Отказ)Экспорт
	
	ПространствоИменСхемы = "http://FreeOrgInfo";		
    		
	УНПКонтрагента = СтруктураПараметров.ID_CONTR_UNP;
	ОбъектОрганизации      = ПолучитьОбъектТипаCML("Организации", ПространствоИменСхемы);
	ОбъектКонтактныеДанные = ПолучитьОбъектТипаCML("КонтактнаяИнформация", ПространствоИменСхемы);
	ОбъектКонтактныеЛица   = ПолучитьОбъектТипаCML("КонтактныеЛица", ПространствоИменСхемы);
	ОбъектБанковскиеСчета  = ПолучитьОбъектТипаCML("БанковскиеСчета", ПространствоИменСхемы);
	

	ЕстьДанные = Ложь;
	СтруктураДанныхКонтрагент = ПолучитьДанныеИзБазыПоКонтрагенту(УНПКонтрагента);
	
	//сервис МНС
	Если СтруктураДанныхКонтрагент.Контрагенты.Пустой() Тогда
		Попытка
			ДанныеКонтрагент = ПолучитьДанныеИзСервиса(УНПКонтрагента);
			
			ОбъектОрганизация = Справочники.С_Организации.СоздатьЭлемент();
			ОбъектОрганизация.Наименование = ДанныеКонтрагент.ROW.VNAIMK;
			ОбъектОрганизация.НаименованиеСокращенное = ДанныеКонтрагент.ROW.VNAIMK;
			ОбъектОрганизация.НаименованиеПолное = ДанныеКонтрагент.ROW.VNAIMK;
			ОбъектОрганизация.ИНН =  УНПКонтрагента;
			ОбъектОрганизация.ЮрФизЛицо =  "ЮридическоеЛицо";
			
			ОбъектОрганизация.Записать();
			
			Набор = РегистрыСведений.С_ВерсииКонтактнойИнформации.СоздатьНаборЗаписей();
			Набор.отбор.Организация.Установить(ОбъектОрганизация.Ссылка);
			Набор.Прочитать();
			Запись = Набор.Добавить();
			Запись.Период = ТекущаяДатаСеанса();
			Запись.Организация = ОбъектОрганизация.Ссылка;
			Запись.Вид = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
			Запись.Тип = перечисления.ТипыКонтактнойИнформации.Адрес;
			
			Если   ТипЗнч(ДанныеКонтрагент.ROW.VPADRES)  = Тип("ОбъектXDTO")Тогда
				Запись.Представление = "";
			Иначе
				Запись.Представление                   = ДанныеКонтрагент.ROW.VPADRES;
			КонецЕсли;
			
			Набор.Записать();
			
			СтруктураДанныхКонтрагент = ПолучитьДанныеИзБазыПоКонтрагенту(УНПКонтрагента);
			
			ДанныеКонтрагент =  СтруктураДанныхКонтрагент.Контрагенты;
			ВыборкаКонтрагент = ДанныеКонтрагент.Выбрать();
			
			ДанныеКонтактнаяИнформация   = СтруктураДанныхКонтрагент.КонтактнаяИнформация;
			ВыборкаКонтактнаяИнформация  = ДанныеКонтактнаяИнформация.Выбрать();
			ЕстьДанные = Ложь;
			
			Если ВыборкаКонтрагент.Следующий() Тогда
				
				ОбъектОрганизация = ПолучитьОбъектТипаCML("Организация", ПространствоИменСхемы);
				
				ОбъектКлючевыеСвойстваОрганизация = ПолучитьОбъектТипаCML("КлючевыеСвойстваОрганизация", ПространствоИменСхемы);
				
				ОбъектКлючевыеСвойстваОрганизация["Наименование"]              =  ВыборкаКонтрагент.Наименование;
				ОбъектКлючевыеСвойстваОрганизация["НаименованиеСокращенное"]   =  ВыборкаКонтрагент.НаименованиеСокращенное;
				ОбъектКлючевыеСвойстваОрганизация["НаименованиеПолное"]        =  ВыборкаКонтрагент.НаименованиеПолное;
				ОбъектКлючевыеСвойстваОрганизация["ИНН"]                       =  ВыборкаКонтрагент.ИНН;
				ОбъектКлючевыеСвойстваОрганизация["ЮрФизЛицо"]                 =  ВыборкаКонтрагент.ЮрФизЛицо;
				ОбъектОрганизация["КлючевыеСвойства"]                          =  ОбъектКлючевыеСвойстваОрганизация;
				
				Если СтруктураПараметров.ИспользоватьАдресный Тогда	
					
					Пока ВыборкаКонтактнаяИнформация.Следующий()   Цикл
						
						Версия =   ВыборкаКонтактнаяИнформация.Версия;
						
						Если ВыборкаКонтактнаяИнформация.Вид = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента Тогда 
							ОбъектКонтактныеДанныеСтрока = ПолучитьОбъектТипаCML("КонтактнаяИнформация.Строка", ПространствоИменСхемы);
							ОбъектКонтактныеДанныеСтрока["ВидКонтактнойИнформации"]          =  "ЮридическийАдрес";
							ОбъектКонтактныеДанныеСтрока["ЗначенияПолей"]                    = ВыборкаКонтактнаяИнформация.Представление;
							ОбъектКонтактныеДанныеСтрока["НаименованиеКонтактнойИнформации"] = "Адрес";
							ОбъектКонтактныеДанные["Строка"].Добавить(ОбъектКонтактныеДанныеСтрока);
							ЕстьДанные = Истина;
						КонецЕсли;
						
						Если ВыборкаКонтактнаяИнформация.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента Тогда
							ОбъектКонтактныеДанныеСтрока = ПолучитьОбъектТипаCML("КонтактнаяИнформация.Строка", ПространствоИменСхемы);
							ОбъектКонтактныеДанныеСтрока["ВидКонтактнойИнформации"] =  "Телефон";
							ОбъектКонтактныеДанныеСтрока["ЗначенияПолей"]= ВыборкаКонтактнаяИнформация.Представление;
							ОбъектКонтактныеДанныеСтрока["НаименованиеКонтактнойИнформации"]= "Телефон";
							ОбъектКонтактныеДанные["Строка"].Добавить(ОбъектКонтактныеДанныеСтрока);
							ЕстьДанные = Истина;
						КонецЕсли;
						
						Если ВыборкаКонтактнаяИнформация.Вид = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента Тогда
							ОбъектКонтактныеДанныеСтрока = ПолучитьОбъектТипаCML("КонтактнаяИнформация.Строка", ПространствоИменСхемы);
							ОбъектКонтактныеДанныеСтрока["ВидКонтактнойИнформации"] =  "ФактическийАдрес";
							ОбъектКонтактныеДанныеСтрока["ЗначенияПолей"]= ВыборкаКонтактнаяИнформация.Представление;
							ОбъектКонтактныеДанныеСтрока["НаименованиеКонтактнойИнформации"]= "Адрес";
							ОбъектКонтактныеДанные["Строка"].Добавить(ОбъектКонтактныеДанныеСтрока);
							ЕстьДанные = Истина;
						КонецЕсли;
						
						Если ВыборкаКонтактнаяИнформация.Вид = Справочники.ВидыКонтактнойИнформации.EmailКонтрагента Тогда
							ОбъектКонтактныеДанныеСтрока = ПолучитьОбъектТипаCML("КонтактнаяИнформация.Строка", ПространствоИменСхемы);
							ОбъектКонтактныеДанныеСтрока["ВидКонтактнойИнформации"] =  "АдресЭлектроннойПочты";
							ОбъектКонтактныеДанныеСтрока["ЗначенияПолей"]= ВыборкаКонтактнаяИнформация.Представление;
							ОбъектКонтактныеДанныеСтрока["НаименованиеКонтактнойИнформации"]= "АдресЭлектроннойПочты";
							ОбъектКонтактныеДанные["Строка"].Добавить(ОбъектКонтактныеДанныеСтрока);
							ЕстьДанные = Истина;
						КонецЕсли;
						
						Если   ЕстьДанные Тогда
							ОбъектКонтактныеДанные.Версия = Версия;
							ОбъектОрганизация["КонтактнаяИнформация"]  = ОбъектКонтактныеДанные;
						КонецЕсли;
						
					КонецЦикла; 
				КонецЕсли;
				
				ОбъектОрганизации["Организация"].Добавить(ОбъектОрганизация);		
			КонецЕсли;
			
		Исключение	
			
		конецпопытки	
	Иначе
		
		ДанныеКонтрагент =  СтруктураДанныхКонтрагент.Контрагенты;
		ВыборкаКонтрагент = ДанныеКонтрагент.Выбрать();
		
		ДанныеКонтактнаяИнформация   = СтруктураДанныхКонтрагент.КонтактнаяИнформация;
		ВыборкаКонтактнаяИнформация  = ДанныеКонтактнаяИнформация.Выбрать();
		
		ДанныеКонтактныеЛица         = СтруктураДанныхКонтрагент.КонтактныеЛица;
		ВыборкаКонтактныеЛица        = ДанныеКонтактныеЛица.Выбрать();
		
		ДанныеБанковскиеСчета         = СтруктураДанныхКонтрагент.банковскиеСчета;
		ВыборкаБанковскиеСчета         = ДанныеБанковскиеСчета.Выбрать();
		ЕстьДанные = Ложь;
		
		Если ВыборкаКонтрагент.Следующий() Тогда
			
			ЕстьДанные = Истина;
			
			ОбъектОрганизация = ПолучитьОбъектТипаCML("Организация", ПространствоИменСхемы);
			
			ОбъектКлючевыеСвойстваОрганизация = ПолучитьОбъектТипаCML("КлючевыеСвойстваОрганизация", ПространствоИменСхемы);
			
			ОбъектКлючевыеСвойстваОрганизация["Наименование"]              =  ВыборкаКонтрагент.Наименование;
			ОбъектКлючевыеСвойстваОрганизация["НаименованиеСокращенное"]   =  ВыборкаКонтрагент.НаименованиеСокращенное;
			ОбъектКлючевыеСвойстваОрганизация["НаименованиеПолное"]        =  ВыборкаКонтрагент.НаименованиеПолное;
			
			ОбъектКлючевыеСвойстваОрганизация["ВзаимозависимоеЛицо"]       =  ВыборкаКонтрагент.ВзаимозависимоеЛицо;
			ОбъектКлючевыеСвойстваОрганизация["РезидентОффшорнойЗоны"]     =  ВыборкаКонтрагент.РезидентОффшорнойЗоны;
			ОбъектКлючевыеСвойстваОрганизация["СделкаСТоварамиПоПеречню"]  =  ВыборкаКонтрагент.СделкаСТоварамиПоПеречню;
			ОбъектКлючевыеСвойстваОрганизация["КрупныйПлательщикНДС"]      =  ВыборкаКонтрагент.КрупныйПлательщикНДС;
			
			Если  ЗначениеЗаполнено(ВыборкаКонтрагент.НомерОсновногоСчета) И СтруктураПараметров.ИспользоватьБанки Тогда
				ОбъектКлючевыеСвойстваОрганизация["НомерОсновногоСчета"]      =  ВыборкаКонтрагент.НомерОсновногоСчета;
			КонецЕсли;
			
			Если  ЗначениеЗаполнено(ВыборкаКонтрагент.КодФилиала) Тогда
				ОбъектКлючевыеСвойстваОрганизация["КодФилиала"]            =  ВыборкаКонтрагент.КодФилиала;
			КонецЕсли;
			
			ОбъектКлючевыеСвойстваОрганизация["ИНН"]                       =  ВыборкаКонтрагент.ИНН;
			ОбъектКлючевыеСвойстваОрганизация["ЮрФизЛицо"]                 =  ВыборкаКонтрагент.ЮрФизЛицо;
			
			ОбъектОрганизация["КлючевыеСвойства"]                          =  ОбъектКлючевыеСвойстваОрганизация;
			
		КонецЕсли;	
		
		Если СтруктураПараметров.ИспользоватьАдресный Тогда
			
			Пока ВыборкаКонтактнаяИнформация.Следующий() Цикл
				
				Версия =   ВыборкаКонтактнаяИнформация.Версия;
				Если ВыборкаКонтактнаяИнформация.Вид = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента Тогда 
					ОбъектКонтактныеДанныеСтрока = ПолучитьОбъектТипаCML("КонтактнаяИнформация.Строка", ПространствоИменСхемы);
					ОбъектКонтактныеДанныеСтрока["ВидКонтактнойИнформации"]          =  "ЮридическийАдрес";
					ОбъектКонтактныеДанныеСтрока["ЗначенияПолей"]                    = ВыборкаКонтактнаяИнформация.Представление;
					ОбъектКонтактныеДанныеСтрока["НаименованиеКонтактнойИнформации"] = "Адрес";
					ОбъектКонтактныеДанные["Строка"].Добавить(ОбъектКонтактныеДанныеСтрока);
					ЕстьДанные = Истина;
				КонецЕсли;
				
				Если ВыборкаКонтактнаяИнформация.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента Тогда
					ОбъектКонтактныеДанныеСтрока = ПолучитьОбъектТипаCML("КонтактнаяИнформация.Строка", ПространствоИменСхемы);
					ОбъектКонтактныеДанныеСтрока["ВидКонтактнойИнформации"] =  "Телефон";
					ОбъектКонтактныеДанныеСтрока["ЗначенияПолей"]= ВыборкаКонтактнаяИнформация.Представление;
					ОбъектКонтактныеДанныеСтрока["НаименованиеКонтактнойИнформации"]= "Телефон";
					ОбъектКонтактныеДанные["Строка"].Добавить(ОбъектКонтактныеДанныеСтрока);
					ЕстьДанные = Истина;
				КонецЕсли;
				
				Если ВыборкаКонтактнаяИнформация.Вид = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента Тогда
					ОбъектКонтактныеДанныеСтрока = ПолучитьОбъектТипаCML("КонтактнаяИнформация.Строка", ПространствоИменСхемы);
					ОбъектКонтактныеДанныеСтрока["ВидКонтактнойИнформации"] =  "ФактическийАдрес";
					ОбъектКонтактныеДанныеСтрока["ЗначенияПолей"]= ВыборкаКонтактнаяИнформация.Представление;
					ОбъектКонтактныеДанныеСтрока["НаименованиеКонтактнойИнформации"]= "Адрес";
					ОбъектКонтактныеДанные["Строка"].Добавить(ОбъектКонтактныеДанныеСтрока);
					ЕстьДанные = Истина;
				КонецЕсли;
				
				Если ВыборкаКонтактнаяИнформация.Вид = Справочники.ВидыКонтактнойИнформации.EmailКонтрагента Тогда
					ОбъектКонтактныеДанныеСтрока = ПолучитьОбъектТипаCML("КонтактнаяИнформация.Строка", ПространствоИменСхемы);
					ОбъектКонтактныеДанныеСтрока["ВидКонтактнойИнформации"] =  "АдресЭлектроннойПочты";
					ОбъектКонтактныеДанныеСтрока["ЗначенияПолей"]= ВыборкаКонтактнаяИнформация.Представление;
					ОбъектКонтактныеДанныеСтрока["НаименованиеКонтактнойИнформации"]= "АдресЭлектроннойПочты";
					ОбъектКонтактныеДанные["Строка"].Добавить(ОбъектКонтактныеДанныеСтрока);
					ЕстьДанные = Истина;
				КонецЕсли;
				
				Если   ЕстьДанные Тогда
					ОбъектКонтактныеДанные.Версия = Версия;
					ОбъектОрганизация["КонтактнаяИнформация"]  = ОбъектКонтактныеДанные;
				КонецЕсли;
				
			КонецЦикла; 
			
		КонецЕсли;	
		
		Пока ВыборкаКонтактныеЛица.Следующий() Цикл
			ОбъектКонтактныеЛицаСтрока = ПолучитьОбъектТипаCML("КонтактныеЛица.Строка", ПространствоИменСхемы);
			
			Если  ЗначениеЗаполнено(ВыборкаКонтактныеЛица.Должность) Тогда
				ОбъектКонтактныеЛицаСтрока.Должность  = ВыборкаКонтактныеЛица.Должность;
			КонецЕсли;
			
			ОбъектКонтактныеЛицаСтрока.Имя        = ВыборкаКонтактныеЛица.Имя;
			ОбъектКонтактныеЛицаСтрока.Фамилия    = ВыборкаКонтактныеЛица.Фамилия;
			ОбъектКонтактныеЛицаСтрока.Отчество   = ВыборкаКонтактныеЛица.Отчество;
			
			Если ЗначениеЗаполнено(ВыборкаКонтактныеЛица.Телефон) И СтруктураПараметров.ИспользоватьАдресный Тогда
				ОбъектКонтактныеЛицаСтрока.Телефон    = ВыборкаКонтактныеЛица.Телефон;
			КонецЕсли; 
			
			Если ЗначениеЗаполнено(ВыборкаКонтактныеЛица.АдресЭлектроннойПочты) И СтруктураПараметров.ИспользоватьАдресный Тогда
				ОбъектКонтактныеЛицаСтрока.АдресЭлектроннойПочты    = ВыборкаКонтактныеЛица.АдресЭлектроннойПочты;
			КонецЕсли;
			
			ОбъектКонтактныеЛица["Строка"].Добавить(ОбъектКонтактныеЛицаСтрока);
			ОбъектКонтактныеЛица.Версия =   ВыборкаКонтактныеЛица.Версия;
			ОбъектОрганизация["КонтактныеЛица"]  = ОбъектКонтактныеЛица;
			
		КонецЦикла;	
		
		Если СтруктураПараметров.ИспользоватьБанки Тогда		
			
			Пока ВыборкаБанковскиеСчета.Следующий() Цикл
				ОбъектБанковскиеСчетаСтрока = ПолучитьОбъектТипаCML("БанковскиеСчета.Строка", ПространствоИменСхемы);
				ЗаполнитьЗначенияСвойств(ОбъектБанковскиеСчетаСтрока,ВыборкаБанковскиеСчета);
				ОбъектБанковскиеСчета["Строка"].Добавить(ОбъектБанковскиеСчетаСтрока);
				ОбъектБанковскиеСчета.Версия =  ВыборкаБанковскиеСчета.Версия;
				ОбъектОрганизация["БанковскиеСчета"]  = ОбъектБанковскиеСчета;
			КонецЦикла;
			
		КонецЕсли;
			
		ОбъектОрганизации["Организация"].Добавить(ОбъектОрганизация);		
	КонецЕсли;
	
	
	Если ЕстьДанные Тогда
		ИмяФайлаОрганизации = ПолучитьИмяВременногоФайла("xml");
		ЗаписьXML  = Новый ЗаписьXML;
		ЗаписьXML.ОткрытьФайл(ИмяФайлаОрганизации,  "UTF-8");   //  СтруктураДанных.ПолноеИмяФайла
		ЗаписьXML.ЗаписатьОбъявлениеXML();
		ЗаписьXML.ЗаписатьНачалоЭлемента("Info");
		
		ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбъектОрганизации, "Организации", , , НазначениеТипаXML.Неявное);
		ЗаписьXML.ЗаписатьКонецЭлемента();
		ЗаписьXML.Закрыть(); 
		ДвоичныеДанные = Новый ДвоичныеДанные(ИмяФайлаОрганизации);
		Ответ.УстановитьТелоИзДвоичныхДанных(ДвоичныеДанные);
		УдалитьФайлы(ИмяФайлаОрганизации);
	КонецЕсли;
	
КонецПроцедуры	

функция ПолучитьДанныеИзСервиса(УНП)Экспорт
	
	ЗаголовкиХТТП = Новый Соответствие;
	ЗаголовкиХТТП.Вставить("Content-Type", "text/xml;charset=UTF-8");
	ЗаголовкиХТТП.Вставить("SOAPAction", "");
	
	HTTPConnect = новый HTTPСоединение("www.portal.nalog.gov.by"); 
	
	
	Запрос = Новый HTTPЗапрос("grp/getData?unp="+УНП, ЗаголовкиХТТП); 
	Ответ = HTTPConnect.Получить(Запрос);
	
	Попытка
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
		Возврат ФабрикаXDTO.ПрочитатьXML(ЧтениеXML)
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	
КонецФункции

// Только для внутреннего использования
Функция ПолучитьОбъектТипаCML(Тип, ВерсияСхемы) Экспорт
	
	Если ТипЗнч(Тип) = Тип("Строка") Тогда
		ТипОбъекта = ПолучитьТипОбъектаCML(Тип, ВерсияСхемы);
	Иначе
		ТипОбъекта = Тип;
	КонецЕсли;
	
	Если ТипОбъекта = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НовыйОбъект = ФабрикаXDTO.Создать(ТипОбъекта);
	
	Возврат НовыйОбъект;
	
КонецФункции

Функция ПолучитьТипОбъектаCML(Тип, ВерсияСхемы)
	
	МассивПути = МассивПодстрок(Тип, ".");
	
	ПервыйЭлемент = МассивПути[0];
	Если Лев(ПервыйЭлемент,1) = "{" И Прав(ПервыйЭлемент,1) = "}" Тогда
		ИмяПакета = Сред(ПервыйЭлемент, 2, СтрДлина(ПервыйЭлемент) - 2);
		Коллекция = ФабрикаXDTO.Пакеты.Получить(ИмяПакета).КорневыеСвойства;
	Иначе
		ТипОбъекта = ФабрикаXDTO.Тип(ВерсияСхемы, ПервыйЭлемент);
		Коллекция = ТипОбъекта.Свойства;
	КонецЕсли;
	
	МассивПути.Удалить(0);
	Пока МассивПути.Количество() > 0 Цикл
		
		Если Коллекция = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Свойство = Коллекция.Получить(МассивПути[0]);
		Если Свойство = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ТипОбъекта = Свойство.Тип;
		МассивПути.Удалить(0);
		Попытка
			Коллекция = ТипОбъекта.Свойства;
		Исключение
			Коллекция = Неопределено;
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат ТипОбъекта;
	
КонецФункции

//Функция раскладывает строку на элементы массива
Функция МассивПодстрок(Знач Строка, Разделитель) Экспорт
	
	Результат = Новый Массив;
	Если ПустаяСтрока(Строка) Тогда
		Возврат Результат;
	КонецЕсли;
	
	НачПозицияПервогоЭлемента = Найти(Строка, "{");
	КонПозицияПервогоЭлемента = Найти(Строка, "}");
	Если НачПозицияПервогоЭлемента > 0 И КонПозицияПервогоЭлемента > 0 Тогда
		ПервыйЭлемент = Сред(Строка, НачПозицияПервогоЭлемента, КонПозицияПервогоЭлемента);
		Результат.Добавить(СокрЛП(ПервыйЭлемент));
		Строка = СокрЛП(Сред(Строка,КонПозицияПервогоЭлемента + 2));
	КонецЕсли;
	
	Пока Истина Цикл
		Позиция = Найти(Строка,Разделитель);
		Если Позиция = 0 Тогда
			Прервать;
		КонецЕсли;
		
		Результат.Добавить(СокрЛП(Лев(Строка,Позиция - 1)));
		Строка = СокрЛП(Сред(Строка,Позиция + 1));
	КонецЦикла;
	
	Результат.Добавить(СокрЛП(Строка));
	
	Возврат Результат;
	
КонецФункции 

Функция ПолучитьТаблицуЗначений()
	
	ТаблицаКонтакты = Новый ТаблицаЗначений;
	ТаблицаКонтакты.Колонки.Добавить("УНП", Новый ОписаниеТипов("Строка"));
	ТаблицаКонтакты.Колонки.Добавить("Версия", Новый ОписаниеТипов("Дата"));
	
	Возврат  ТаблицаКонтакты;
	
КонецФункции	

Процедура ОпределитьВидТипКИ(СтрокаКИXDTO, Вид, Тип)
	
	Если  СтрокаКИXDTO.ВидКонтактнойИнформации = "Телефон" Тогда
		Вид = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;	 
	ИначеЕсли СтрокаКИXDTO.ВидКонтактнойИнформации = "ФактическийАдрес" Тогда	
		Вид = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента
	ИначеЕсли СтрокаКИXDTO.ВидКонтактнойИнформации = "ЮридическийАдрес" Тогда	
		Вид = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента
	ИначеЕсли СтрокаКИXDTO.ВидКонтактнойИнформации = "АдресЭлектроннойПочты" Тогда
		Вид = Справочники.ВидыКонтактнойИнформации.EmailКонтрагента
	КонецЕсли;
	
	
	Если  СтрокаКИXDTO.НаименованиеКонтактнойИнформации =  "Адрес" Тогда
		Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
	ИначеЕсли СтрокаКИXDTO.НаименованиеКонтактнойИнформации =  "Телефон" Тогда
		Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
	ИначеЕсли СтрокаКИXDTO.НаименованиеКонтактнойИнформации =  "АдресЭлектроннойПочты" Тогда
		Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
	КонецЕсли;	
	
	
КонецПроцедуры	

Процедура ЗаполнитьСтрокуКИ(НаборыУНП, ОбъектИНН, КонтактнаяИнформация)
	
	Вид = Неопределено;
	Тип = Неопределено;
	ОпределитьВидТипКИ(КонтактнаяИнформация, Вид, Тип);
	
	СтрокаКИ = НаборыУНП.Добавить();
	СтрокаКИ.Период = ТекущаяДата();
	СтрокаКИ.Организация =   ОбъектИНН;
	ЗаполнитьКИ(СтрокаКИ, КонтактнаяИнформация, Вид, Тип);
	
	НаборыУНП.Записать();
КонецПроцедуры	

Процедура ЗаполнитьСтрокуКЛ(НаборыУНП, ОбъектИНН, КонтактныеЛица)
	
	
	СтрокаКЛ = НаборыУНП.Добавить();
	СтрокаКЛ.Период = ТекущаяДата();
	СтрокаКЛ.Организация =   ОбъектИНН;
	
	ЗаполнитьКЛ(СтрокаКЛ, КонтактныеЛица);	
	
	НаборыУНП.Записать();
	
КонецПроцедуры	

Процедура ЗаполнитьСтрокуБС(НаборыУНП, ОбъектИНН, БанковскиеСчета)
	
	
	СтрокаБС = НаборыУНП.Добавить();
	СтрокаБС.Организация =   ОбъектИНН;
	СтрокаБС.Период = Текущаядата();
	ЗаполнитьБС(СтрокаБС, БанковскиеСчета);
	
	НаборыУНП.Записать();
КонецПроцедуры	

Процедура ЗаполнитьКИ(СтрокаКИ, СтрокаКИXDTO, Вид, Тип)
	
	СтрокаКИ.Вид = Вид;
	СтрокаКИ.Тип = Тип;
	СтрокаКИ.Представление = СтрокаКИXDTO.ЗначенияПолей;
	
КонецПроцедуры	


Процедура ЗаполнитьКЛ(СтрокаКЛ, СтрокаКЛXDTO)
	
	ЗаполнитьЗначенияСвойств(СтрокаКЛ,СтрокаКЛXDTO); 
	
КонецПроцедуры	

Процедура ЗаполнитьБС(СтрокаБС, СтрокаБСXDTO)
	
	ЗаполнитьЗначенияСвойств(СтрокаБС, СтрокаБСXDTO); 
	
	Если  СтрокаБС.ТекстНазначения = "ОбъектXDTO" Тогда 
		СтрокаБС.ТекстНазначения = "";
	КонецЕсли;
	
	Если  СтрокаБС.ТекстКорреспондента = "ОбъектXDTO" Тогда 
		СтрокаБС.ТекстКорреспондента = "";
	КонецЕсли;	
	
КонецПроцедуры


#КонецОбласти	